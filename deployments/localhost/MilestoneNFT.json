{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creatorMgmtAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "mintCreatorNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artist",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "milestoneId",
          "type": "uint256"
        }
      ],
      "name": "mintDonatorNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79f81793aa7baf13dbecfdd3b27551fa770335225c97a483b40cee8b35da2071",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2872949",
    "logsBloom": "0x
    "blockHash": "0x36ff42122cf06966564eb71d802f935fa54cbcdd28c1f1f0f864c769b91f7ee6",
    "transactionHash": "0x79f81793aa7baf13dbecfdd3b27551fa770335225c97a483b40cee8b35da2071",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2872949",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7c59c2295984a7c15f0fb7c02ced50c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorMgmtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"mintCreatorNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"milestoneId\",\"type\":\"uint256\"}],\"name\":\"mintDonatorNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MilestoneNFT.sol\":\"MilestoneNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CreatorMgmt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\\r\\nerror AmountToLow(address sender, address creator, uint256 donate);\\r\\nerror ItemNotForSale(address nftAddress, uint256 tokenId);\\r\\nerror NotListed(address creatorAddress);\\r\\nerror AlreadyListed(address creatorAddress);\\r\\nerror NoFunds();\\r\\nerror NotOwner();\\r\\nerror NotApprovedForMarketplace();\\r\\nerror PriceMustBeAboveZero();\\r\\n\\r\\ncontract CreatorMgmt is ReentrancyGuard {\\r\\n    struct Creator {\\r\\n        address addr;\\r\\n        string name;\\r\\n        string pic;\\r\\n        uint256 funds;\\r\\n    }\\r\\n\\r\\n    struct Milestone {\\r\\n        uint256 price;\\r\\n        address nftAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct MilestonePerDonator {\\r\\n        uint256 fund;\\r\\n        bool[5] status;\\r\\n    }\\r\\n\\r\\n    event UserCreated(address indexed creator, string name, string pic);\\r\\n\\r\\n    event Donate(\\r\\n        address indexed creator,\\r\\n        address indexed donator,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    uint256 public constant MAX_MILESTONE = 5;\\r\\n\\r\\n    mapping(address => Creator) private s_creators;\\r\\n    mapping(address => Milestone[]) private s_milestoneArray;\\r\\n    mapping(address => mapping(address => MilestonePerDonator)) s_donators;\\r\\n\\r\\n    modifier notRegistered(address creatorAddress) {\\r\\n        Creator memory creator = s_creators[creatorAddress];\\r\\n        if (creator.addr != address(0)) {\\r\\n            revert AlreadyListed(creatorAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isRegistered(address creatorAddress) {\\r\\n        Creator memory creator = s_creators[creatorAddress];\\r\\n        if (creator.addr == address(0)) {\\r\\n            revert NotListed(creatorAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwner(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address creator\\r\\n    ) {\\r\\n        IERC721 nft = IERC721(nftAddress);\\r\\n        address owner = nft.ownerOf(tokenId);\\r\\n        if (creator != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // register as a creator\\r\\n    // TODO\\r\\n    // check if user already exist?\\r\\n    function creatorRegister(string calldata name, string calldata pic)\\r\\n        external\\r\\n        notRegistered(msg.sender)\\r\\n    {\\r\\n        s_creators[msg.sender] = Creator(msg.sender, name, pic, 0);\\r\\n        emit UserCreated(msg.sender, name, pic);\\r\\n    }\\r\\n\\r\\n    function updateProfile(string calldata name, string calldata pic)\\r\\n        external\\r\\n        isRegistered(msg.sender)\\r\\n    {\\r\\n        s_creators[msg.sender].name = name;\\r\\n        s_creators[msg.sender].pic = pic;\\r\\n        emit UserCreated(msg.sender, name, pic);\\r\\n    }\\r\\n\\r\\n    // gift creator a klay\\r\\n    function donate(address creator)\\r\\n        external\\r\\n        payable\\r\\n        isRegistered(creator)\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (msg.value < 0.1 ether) {\\r\\n            revert AmountToLow(msg.sender, creator, msg.value);\\r\\n        }\\r\\n        s_creators[creator].funds += msg.value;\\r\\n        s_donators[msg.sender][creator].fund += msg.value;\\r\\n        uint256 milestoneCount = s_milestoneArray[creator].length;\\r\\n\\r\\n        if (milestoneCount > 0) {\\r\\n            for (uint256 i = 0; i < milestoneCount; i++) {\\r\\n                // check if donator reach the milestone?\\r\\n                // check if already marked true?\\r\\n                if (\\r\\n                    (s_donators[msg.sender][creator].fund >=\\r\\n                        s_milestoneArray[creator][i].price) &&\\r\\n                    s_donators[msg.sender][creator].status[i] == false\\r\\n                ) {\\r\\n                    s_donators[msg.sender][creator].status[i] = true;\\r\\n                    // check if donator already own?\\r\\n                    // if not own and eligible, send the NFTs\\r\\n                    // TODO comeback to this latter when we create NFT contract\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit Donate(creator, msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function addMilestone(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    )\\r\\n        external\\r\\n        isRegistered(msg.sender)\\r\\n        isOwner(nftAddress, tokenId, msg.sender)\\r\\n    {\\r\\n        // add milestone NFTs, check first if the sender registered, is actually own the NFT\\r\\n        // then check if not more than max milestones\\r\\n        require(\\r\\n            s_milestoneArray[msg.sender].length <= MAX_MILESTONE,\\r\\n            \\\"You reach limit of milestone\\\"\\r\\n        );\\r\\n        s_milestoneArray[msg.sender].push(\\r\\n            Milestone(price, nftAddress, tokenId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @notice Method for withdrawing from donators\\r\\n     */\\r\\n    function withdrawFunds() external {\\r\\n        uint256 funds = s_creators[msg.sender].funds;\\r\\n        if (funds <= 0) {\\r\\n            revert NoFunds();\\r\\n        }\\r\\n        s_creators[msg.sender].funds = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: funds}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function getFunds(address creator) external view returns (uint256) {\\r\\n        return s_creators[creator].funds;\\r\\n    }\\r\\n\\r\\n    function isLessMilestones(address creator) external view returns (bool) {\\r\\n        return s_milestoneArray[creator].length <= MAX_MILESTONE;\\r\\n    }\\r\\n\\r\\n    function isCreator(address creatorAddress) external view returns (bool) {\\r\\n        Creator memory creator = s_creators[creatorAddress];\\r\\n        if (creator.addr == address(0)) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isEligibleToMint(address creatorAddress, uint256 milestoneId)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (\\r\\n            s_donators[msg.sender][creatorAddress].status[milestoneId] == true\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getTokenId(address creator, uint256 milestoneId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_milestoneArray[creator][milestoneId].tokenId;\\r\\n    }\\r\\n\\r\\n    function afterMintMilestone(address creator, uint256 milestoneId) external {\\r\\n        s_donators[msg.sender][creator].status[milestoneId] = false;\\r\\n    }\\r\\n\\r\\n    function getCreator(address creator)\\r\\n        external\\r\\n        view\\r\\n        returns (Creator memory)\\r\\n    {\\r\\n        s_creators[creator];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x336586c26a99be30c93ab7c20a652a4c6f9a6f0db6af0d186d1297484d8eb3e4\",\"license\":\"UNLICENSED\"},\"contracts/MilestoneNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./CreatorMgmt.sol\\\";\\r\\n\\r\\ncontract MilestoneNFT is ERC1155 {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n    address private creatorMgmtAddress;\\r\\n\\r\\n    constructor(address _creatorMgmtAddress) ERC1155(\\\"\\\") {\\r\\n        creatorMgmtAddress = _creatorMgmtAddress;\\r\\n    }\\r\\n\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\r\\n    // mint as creator\\r\\n    function mintCreatorNFT(string memory _tokenURI, uint256 _price)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // check if creator\\r\\n        require(\\r\\n            CreatorMgmt(creatorMgmtAddress).isCreator(msg.sender),\\r\\n            \\\"Not a creator, register first\\\"\\r\\n        );\\r\\n        // check if reach maximum milestone\\r\\n        require(\\r\\n            CreatorMgmt(creatorMgmtAddress).isLessMilestones(msg.sender),\\r\\n            \\\"You reach limit of milestone\\\"\\r\\n        );\\r\\n        _tokenIds.increment();\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        _mint(msg.sender, newItemId, 1, \\\"\\\");\\r\\n        _setTokenURI(newItemId, _tokenURI);\\r\\n        /// after mint, please update CreatorMgnt NFTMilestone (call addMilestone)\\r\\n        CreatorMgmt(creatorMgmtAddress).addMilestone(\\r\\n            address(this),\\r\\n            newItemId,\\r\\n            _price\\r\\n        );\\r\\n        return newItemId;\\r\\n    }\\r\\n\\r\\n    // mint as a donator\\r\\n    // TODO need to check whether elligible trough Mgmt contract\\r\\n    function mintDonatorNFT(address artist, uint256 milestoneId)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // check if he eligible to mint the milestoneNFT?\\r\\n        require(\\r\\n            CreatorMgmt(creatorMgmtAddress).isEligibleToMint(\\r\\n                artist,\\r\\n                milestoneId\\r\\n            ),\\r\\n            \\\"You are not elligible\\\"\\r\\n        );\\r\\n        // need to check and not mint if already mint one\\r\\n        _mint(\\r\\n            msg.sender,\\r\\n            CreatorMgmt(creatorMgmtAddress).getTokenId(artist, milestoneId),\\r\\n            1,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        // set to not be able to mint again for this milestoneId\\r\\n        CreatorMgmt(creatorMgmtAddress).afterMintMilestone(artist, milestoneId);\\r\\n        return milestoneId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5fd1e462d754fdef237f67ec1cad6ffbb6da79ea5416a642b6777450c03291aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200373a3803806200373a833981810160405281019062000037919062000120565b604051806020016040528060008152506200005881620000a160201b60201c565b5080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620004b3565b8060029081620000b29190620003cc565b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001d457607f821691505b602082108103620001ea57620001e96200018c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000215565b62000260868362000215565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002ad620002a7620002a18462000278565b62000282565b62000278565b9050919050565b6000819050919050565b620002c9836200028c565b620002e1620002d882620002b4565b84845462000222565b825550505050565b600090565b620002f8620002e9565b62000305818484620002be565b505050565b5b818110156200032d5762000321600082620002ee565b6001810190506200030b565b5050565b601f8211156200037c576200034681620001f0565b620003518462000205565b8101602085101562000361578190505b62000379620003708562000205565b8301826200030a565b50505b505050565b600082821c905092915050565b6000620003a16000198460080262000381565b1980831691505092915050565b6000620003bc83836200038e565b9150826002028217905092915050565b620003d78262000152565b67ffffffffffffffff811115620003f357620003f26200015d565b5b620003ff8254620001bb565b6200040c82828562000331565b600060209050601f8311600181146200044457600084156200042f578287015190505b6200043b8582620003ae565b865550620004ab565b601f1984166200045486620001f0565b60005b828110156200047e5784890151825560018201915060208501945060208101905062000457565b868310156200049e57848901516200049a601f8916826200038e565b8355505b6001600288020188555050505b505050505050565b61327780620004c36000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c80635a8c2e47116100665780635a8c2e471461017e578063a22cb465146101ae578063b2bd3ea0146101ca578063e985e9c5146101fa578063f242432a1461022a5761009d565b8062fdd58e146100a257806301ffc9a7146100d25780630e89341c146101025780632eb2c2d6146101325780634e1273f41461014e575b600080fd5b6100bc60048036038101906100b79190611ae0565b610246565b6040516100c99190611b2f565b60405180910390f35b6100ec60048036038101906100e79190611ba2565b61030e565b6040516100f99190611bea565b60405180910390f35b61011c60048036038101906101179190611c05565b6103f0565b6040516101299190611cc2565b60405180910390f35b61014c60048036038101906101479190611ee1565b610484565b005b61016860048036038101906101639190612073565b610525565b60405161017591906121a9565b60405180910390f35b6101986004803603810190610193919061226c565b61063e565b6040516101a59190611b2f565b60405180910390f35b6101c860048036038101906101c391906122f4565b6108cf565b005b6101e460048036038101906101df9190611ae0565b6108e5565b6040516101f19190611b2f565b60405180910390f35b610214600480360381019061020f9190612334565b610b15565b6040516102219190611bea565b60405180910390f35b610244600480360381019061023f9190612374565b610ba9565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ad9061247d565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103d957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103e957506103e882610c4a565b5b9050919050565b6060600280546103ff906124cc565b80601f016020809104026020016040519081016040528092919081815260200182805461042b906124cc565b80156104785780601f1061044d57610100808354040283529160200191610478565b820191906000526020600020905b81548152906001019060200180831161045b57829003601f168201915b50505050509050919050565b61048c610cb4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806104d257506104d1856104cc610cb4565b610b15565b5b610511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105089061256f565b60405180910390fd5b61051e8585858585610cbc565b5050505050565b6060815183511461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290612601565b60405180910390fd5b6000835167ffffffffffffffff81111561058857610587611ce9565b5b6040519080825280602002602001820160405280156105b65781602001602082028036833780820191505090505b50905060005b8451811015610633576106038582815181106105db576105da612621565b5b60200260200101518583815181106105f6576105f5612621565b5b6020026020010151610246565b82828151811061061657610615612621565b5b6020026020010181815250508061062c9061267f565b90506105bc565b508091505092915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efd46065336040518263ffffffff1660e01b815260040161069b91906126d6565b602060405180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190612706565b61071b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107129061277f565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095acc58336040518263ffffffff1660e01b815260040161077691906126d6565b602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190612706565b6107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed906127eb565b60405180910390fd5b6108006003610fdd565b600061080c6003610ff3565b905061082a3382600160405180602001604052806000815250611001565b61083481856111b1565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b6733323083866040518463ffffffff1660e01b81526004016108939392919061280b565b600060405180830381600087803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050508091505092915050565b6108e16108da610cb4565b83836111d6565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c77bf584846040518363ffffffff1660e01b8152600401610944929190612842565b602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190612706565b6109c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bb906128b7565b60405180910390fd5b610a7d33600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329f99b9f86866040518363ffffffff1660e01b8152600401610a25929190612842565b602060405180830381865afa158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6691906128ec565b600160405180602001604052806000815250611001565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4b25ffb84846040518363ffffffff1660e01b8152600401610ada929190612842565b600060405180830381600087803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b5050505081905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bb1610cb4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610bf75750610bf685610bf1610cb4565b610b15565b5b610c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2d9061256f565b60405180910390fd5b610c438585858585611342565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf79061298b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6690612a1d565b60405180910390fd5b6000610d79610cb4565b9050610d898187878787876115dd565b60005b8451811015610f3a576000858281518110610daa57610da9612621565b5b602002602001015190506000858381518110610dc957610dc8612621565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190612aaf565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f1f9190612acf565b9250508190555050505080610f339061267f565b9050610d8c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610fb1929190612b03565b60405180910390a4610fc78187878787876115e5565b610fd58187878787876115ed565b505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106790612bac565b60405180910390fd5b600061107a610cb4565b90506000611087856117c4565b90506000611094856117c4565b90506110a5836000898585896115dd565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111049190612acf565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611182929190612bcc565b60405180910390a4611199836000898585896115e5565b6111a88360008989898961183e565b50505050505050565b806004600084815260200190815260200160002090816111d19190612da1565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90612ee5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113359190611bea565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036113b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a890612a1d565b60405180910390fd5b60006113bb610cb4565b905060006113c8856117c4565b905060006113d5856117c4565b90506113e58389898585896115dd565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561147c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147390612aaf565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115319190612acf565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516115ae929190612bcc565b60405180910390a46115c4848a8a86868a6115e5565b6115d2848a8a8a8a8a61183e565b505050505050505050565b505050505050565b505050505050565b61160c8473ffffffffffffffffffffffffffffffffffffffff16611a15565b156117bc578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611652959493929190612f5a565b6020604051808303816000875af192505050801561168e57506040513d601f19601f8201168201806040525081019061168b9190612fd7565b60015b6117335761169a613011565b806308c379a0036116f657506116ae613033565b806116b957506116f8565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ed9190611cc2565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172a90613135565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b1906131c7565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff8111156117e3576117e2611ce9565b5b6040519080825280602002602001820160405280156118115781602001602082028036833780820191505090505b509050828160008151811061182957611828612621565b5b60200260200101818152505080915050919050565b61185d8473ffffffffffffffffffffffffffffffffffffffff16611a15565b15611a0d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016118a39594939291906131e7565b6020604051808303816000875af19250505080156118df57506040513d601f19601f820116820180604052508101906118dc9190612fd7565b60015b611984576118eb613011565b806308c379a00361194757506118ff613033565b8061190a5750611949565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e9190611cc2565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197b90613135565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a02906131c7565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a7782611a4c565b9050919050565b611a8781611a6c565b8114611a9257600080fd5b50565b600081359050611aa481611a7e565b92915050565b6000819050919050565b611abd81611aaa565b8114611ac857600080fd5b50565b600081359050611ada81611ab4565b92915050565b60008060408385031215611af757611af6611a42565b5b6000611b0585828601611a95565b9250506020611b1685828601611acb565b9150509250929050565b611b2981611aaa565b82525050565b6000602082019050611b446000830184611b20565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b7f81611b4a565b8114611b8a57600080fd5b50565b600081359050611b9c81611b76565b92915050565b600060208284031215611bb857611bb7611a42565b5b6000611bc684828501611b8d565b91505092915050565b60008115159050919050565b611be481611bcf565b82525050565b6000602082019050611bff6000830184611bdb565b92915050565b600060208284031215611c1b57611c1a611a42565b5b6000611c2984828501611acb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c6c578082015181840152602081019050611c51565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c9482611c32565b611c9e8185611c3d565b9350611cae818560208601611c4e565b611cb781611c78565b840191505092915050565b60006020820190508181036000830152611cdc8184611c89565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d2182611c78565b810181811067ffffffffffffffff82111715611d4057611d3f611ce9565b5b80604052505050565b6000611d53611a38565b9050611d5f8282611d18565b919050565b600067ffffffffffffffff821115611d7f57611d7e611ce9565b5b602082029050602081019050919050565b600080fd5b6000611da8611da384611d64565b611d49565b90508083825260208201905060208402830185811115611dcb57611dca611d90565b5b835b81811015611df45780611de08882611acb565b845260208401935050602081019050611dcd565b5050509392505050565b600082601f830112611e1357611e12611ce4565b5b8135611e23848260208601611d95565b91505092915050565b600080fd5b600067ffffffffffffffff821115611e4c57611e4b611ce9565b5b611e5582611c78565b9050602081019050919050565b82818337600083830152505050565b6000611e84611e7f84611e31565b611d49565b905082815260208101848484011115611ea057611e9f611e2c565b5b611eab848285611e62565b509392505050565b600082601f830112611ec857611ec7611ce4565b5b8135611ed8848260208601611e71565b91505092915050565b600080600080600060a08688031215611efd57611efc611a42565b5b6000611f0b88828901611a95565b9550506020611f1c88828901611a95565b945050604086013567ffffffffffffffff811115611f3d57611f3c611a47565b5b611f4988828901611dfe565b935050606086013567ffffffffffffffff811115611f6a57611f69611a47565b5b611f7688828901611dfe565b925050608086013567ffffffffffffffff811115611f9757611f96611a47565b5b611fa388828901611eb3565b9150509295509295909350565b600067ffffffffffffffff821115611fcb57611fca611ce9565b5b602082029050602081019050919050565b6000611fef611fea84611fb0565b611d49565b9050808382526020820190506020840283018581111561201257612011611d90565b5b835b8181101561203b57806120278882611a95565b845260208401935050602081019050612014565b5050509392505050565b600082601f83011261205a57612059611ce4565b5b813561206a848260208601611fdc565b91505092915050565b6000806040838503121561208a57612089611a42565b5b600083013567ffffffffffffffff8111156120a8576120a7611a47565b5b6120b485828601612045565b925050602083013567ffffffffffffffff8111156120d5576120d4611a47565b5b6120e185828601611dfe565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61212081611aaa565b82525050565b60006121328383612117565b60208301905092915050565b6000602082019050919050565b6000612156826120eb565b61216081856120f6565b935061216b83612107565b8060005b8381101561219c5781516121838882612126565b975061218e8361213e565b92505060018101905061216f565b5085935050505092915050565b600060208201905081810360008301526121c3818461214b565b905092915050565b600067ffffffffffffffff8211156121e6576121e5611ce9565b5b6121ef82611c78565b9050602081019050919050565b600061220f61220a846121cb565b611d49565b90508281526020810184848401111561222b5761222a611e2c565b5b612236848285611e62565b509392505050565b600082601f83011261225357612252611ce4565b5b81356122638482602086016121fc565b91505092915050565b6000806040838503121561228357612282611a42565b5b600083013567ffffffffffffffff8111156122a1576122a0611a47565b5b6122ad8582860161223e565b92505060206122be85828601611acb565b9150509250929050565b6122d181611bcf565b81146122dc57600080fd5b50565b6000813590506122ee816122c8565b92915050565b6000806040838503121561230b5761230a611a42565b5b600061231985828601611a95565b925050602061232a858286016122df565b9150509250929050565b6000806040838503121561234b5761234a611a42565b5b600061235985828601611a95565b925050602061236a85828601611a95565b9150509250929050565b600080600080600060a086880312156123905761238f611a42565b5b600061239e88828901611a95565b95505060206123af88828901611a95565b94505060406123c088828901611acb565b93505060606123d188828901611acb565b925050608086013567ffffffffffffffff8111156123f2576123f1611a47565b5b6123fe88828901611eb3565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612467602a83611c3d565b91506124728261240b565b604082019050919050565b600060208201905081810360008301526124968161245a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124e457607f821691505b6020821081036124f7576124f661249d565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000612559602f83611c3d565b9150612564826124fd565b604082019050919050565b600060208201905081810360008301526125888161254c565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006125eb602983611c3d565b91506125f68261258f565b604082019050919050565b6000602082019050818103600083015261261a816125de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061268a82611aaa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126bc576126bb612650565b5b600182019050919050565b6126d081611a6c565b82525050565b60006020820190506126eb60008301846126c7565b92915050565b600081519050612700816122c8565b92915050565b60006020828403121561271c5761271b611a42565b5b600061272a848285016126f1565b91505092915050565b7f4e6f7420612063726561746f722c207265676973746572206669727374000000600082015250565b6000612769601d83611c3d565b915061277482612733565b602082019050919050565b600060208201905081810360008301526127988161275c565b9050919050565b7f596f75207265616368206c696d6974206f66206d696c6573746f6e6500000000600082015250565b60006127d5601c83611c3d565b91506127e08261279f565b602082019050919050565b60006020820190508181036000830152612804816127c8565b9050919050565b600060608201905061282060008301866126c7565b61282d6020830185611b20565b61283a6040830184611b20565b949350505050565b600060408201905061285760008301856126c7565b6128646020830184611b20565b9392505050565b7f596f7520617265206e6f7420656c6c696769626c650000000000000000000000600082015250565b60006128a1601583611c3d565b91506128ac8261286b565b602082019050919050565b600060208201905081810360008301526128d081612894565b9050919050565b6000815190506128e681611ab4565b92915050565b60006020828403121561290257612901611a42565b5b6000612910848285016128d7565b91505092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612975602883611c3d565b915061298082612919565b604082019050919050565b600060208201905081810360008301526129a481612968565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612a07602583611c3d565b9150612a12826129ab565b604082019050919050565b60006020820190508181036000830152612a36816129fa565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612a99602a83611c3d565b9150612aa482612a3d565b604082019050919050565b60006020820190508181036000830152612ac881612a8c565b9050919050565b6000612ada82611aaa565b9150612ae583611aaa565b9250828201905080821115612afd57612afc612650565b5b92915050565b60006040820190508181036000830152612b1d818561214b565b90508181036020830152612b31818461214b565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b96602183611c3d565b9150612ba182612b3a565b604082019050919050565b60006020820190508181036000830152612bc581612b89565b9050919050565b6000604082019050612be16000830185611b20565b612bee6020830184611b20565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c1a565b612c618683612c1a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c9e612c99612c9484611aaa565b612c79565b611aaa565b9050919050565b6000819050919050565b612cb883612c83565b612ccc612cc482612ca5565b848454612c27565b825550505050565b600090565b612ce1612cd4565b612cec818484612caf565b505050565b5b81811015612d1057612d05600082612cd9565b600181019050612cf2565b5050565b601f821115612d5557612d2681612bf5565b612d2f84612c0a565b81016020851015612d3e578190505b612d52612d4a85612c0a565b830182612cf1565b50505b505050565b600082821c905092915050565b6000612d7860001984600802612d5a565b1980831691505092915050565b6000612d918383612d67565b9150826002028217905092915050565b612daa82611c32565b67ffffffffffffffff811115612dc357612dc2611ce9565b5b612dcd82546124cc565b612dd8828285612d14565b600060209050601f831160018114612e0b5760008415612df9578287015190505b612e038582612d85565b865550612e6b565b601f198416612e1986612bf5565b60005b82811015612e4157848901518255600182019150602085019450602081019050612e1c565b86831015612e5e5784890151612e5a601f891682612d67565b8355505b6001600288020188555050505b505050505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612ecf602983611c3d565b9150612eda82612e73565b604082019050919050565b60006020820190508181036000830152612efe81612ec2565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612f2c82612f05565b612f368185612f10565b9350612f46818560208601611c4e565b612f4f81611c78565b840191505092915050565b600060a082019050612f6f60008301886126c7565b612f7c60208301876126c7565b8181036040830152612f8e818661214b565b90508181036060830152612fa2818561214b565b90508181036080830152612fb68184612f21565b90509695505050505050565b600081519050612fd181611b76565b92915050565b600060208284031215612fed57612fec611a42565b5b6000612ffb84828501612fc2565b91505092915050565b60008160e01c9050919050565b600060033d11156130305760046000803e61302d600051613004565b90505b90565b600060443d106130c057613045611a38565b60043d036004823e80513d602482011167ffffffffffffffff8211171561306d5750506130c0565b808201805167ffffffffffffffff81111561308b57505050506130c0565b80602083010160043d0385018111156130a85750505050506130c0565b6130b782602001850186611d18565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061311f603483611c3d565b915061312a826130c3565b604082019050919050565b6000602082019050818103600083015261314e81613112565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006131b1602883611c3d565b91506131bc82613155565b604082019050919050565b600060208201905081810360008301526131e0816131a4565b9050919050565b600060a0820190506131fc60008301886126c7565b61320960208301876126c7565b6132166040830186611b20565b6132236060830185611b20565b81810360808301526132358184612f21565b9050969550505050505056fea264697066735822122012d6a0a86584b36b49b6293019c24f8b11d933d711ef6081ceed6b103fd669c464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009d5760003560e01c80635a8c2e47116100665780635a8c2e471461017e578063a22cb465146101ae578063b2bd3ea0146101ca578063e985e9c5146101fa578063f242432a1461022a5761009d565b8062fdd58e146100a257806301ffc9a7146100d25780630e89341c146101025780632eb2c2d6146101325780634e1273f41461014e575b600080fd5b6100bc60048036038101906100b79190611ae0565b610246565b6040516100c99190611b2f565b60405180910390f35b6100ec60048036038101906100e79190611ba2565b61030e565b6040516100f99190611bea565b60405180910390f35b61011c60048036038101906101179190611c05565b6103f0565b6040516101299190611cc2565b60405180910390f35b61014c60048036038101906101479190611ee1565b610484565b005b61016860048036038101906101639190612073565b610525565b60405161017591906121a9565b60405180910390f35b6101986004803603810190610193919061226c565b61063e565b6040516101a59190611b2f565b60405180910390f35b6101c860048036038101906101c391906122f4565b6108cf565b005b6101e460048036038101906101df9190611ae0565b6108e5565b6040516101f19190611b2f565b60405180910390f35b610214600480360381019061020f9190612334565b610b15565b6040516102219190611bea565b60405180910390f35b610244600480360381019061023f9190612374565b610ba9565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036102b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ad9061247d565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103d957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806103e957506103e882610c4a565b5b9050919050565b6060600280546103ff906124cc565b80601f016020809104026020016040519081016040528092919081815260200182805461042b906124cc565b80156104785780601f1061044d57610100808354040283529160200191610478565b820191906000526020600020905b81548152906001019060200180831161045b57829003601f168201915b50505050509050919050565b61048c610cb4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806104d257506104d1856104cc610cb4565b610b15565b5b610511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105089061256f565b60405180910390fd5b61051e8585858585610cbc565b5050505050565b6060815183511461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290612601565b60405180910390fd5b6000835167ffffffffffffffff81111561058857610587611ce9565b5b6040519080825280602002602001820160405280156105b65781602001602082028036833780820191505090505b50905060005b8451811015610633576106038582815181106105db576105da612621565b5b60200260200101518583815181106105f6576105f5612621565b5b6020026020010151610246565b82828151811061061657610615612621565b5b6020026020010181815250508061062c9061267f565b90506105bc565b508091505092915050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efd46065336040518263ffffffff1660e01b815260040161069b91906126d6565b602060405180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190612706565b61071b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107129061277f565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095acc58336040518263ffffffff1660e01b815260040161077691906126d6565b602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190612706565b6107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed906127eb565b60405180910390fd5b6108006003610fdd565b600061080c6003610ff3565b905061082a3382600160405180602001604052806000815250611001565b61083481856111b1565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b6733323083866040518463ffffffff1660e01b81526004016108939392919061280b565b600060405180830381600087803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050508091505092915050565b6108e16108da610cb4565b83836111d6565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c77bf584846040518363ffffffff1660e01b8152600401610944929190612842565b602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190612706565b6109c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bb906128b7565b60405180910390fd5b610a7d33600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329f99b9f86866040518363ffffffff1660e01b8152600401610a25929190612842565b602060405180830381865afa158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6691906128ec565b600160405180602001604052806000815250611001565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4b25ffb84846040518363ffffffff1660e01b8152600401610ada929190612842565b600060405180830381600087803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b5050505081905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bb1610cb4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610bf75750610bf685610bf1610cb4565b610b15565b5b610c36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2d9061256f565b60405180910390fd5b610c438585858585611342565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf79061298b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6690612a1d565b60405180910390fd5b6000610d79610cb4565b9050610d898187878787876115dd565b60005b8451811015610f3a576000858281518110610daa57610da9612621565b5b602002602001015190506000858381518110610dc957610dc8612621565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190612aaf565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f1f9190612acf565b9250508190555050505080610f339061267f565b9050610d8c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610fb1929190612b03565b60405180910390a4610fc78187878787876115e5565b610fd58187878787876115ed565b505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106790612bac565b60405180910390fd5b600061107a610cb4565b90506000611087856117c4565b90506000611094856117c4565b90506110a5836000898585896115dd565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111049190612acf565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611182929190612bcc565b60405180910390a4611199836000898585896115e5565b6111a88360008989898961183e565b50505050505050565b806004600084815260200190815260200160002090816111d19190612da1565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90612ee5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113359190611bea565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036113b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a890612a1d565b60405180910390fd5b60006113bb610cb4565b905060006113c8856117c4565b905060006113d5856117c4565b90506113e58389898585896115dd565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561147c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147390612aaf565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115319190612acf565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516115ae929190612bcc565b60405180910390a46115c4848a8a86868a6115e5565b6115d2848a8a8a8a8a61183e565b505050505050505050565b505050505050565b505050505050565b61160c8473ffffffffffffffffffffffffffffffffffffffff16611a15565b156117bc578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611652959493929190612f5a565b6020604051808303816000875af192505050801561168e57506040513d601f19601f8201168201806040525081019061168b9190612fd7565b60015b6117335761169a613011565b806308c379a0036116f657506116ae613033565b806116b957506116f8565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ed9190611cc2565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172a90613135565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b1906131c7565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff8111156117e3576117e2611ce9565b5b6040519080825280602002602001820160405280156118115781602001602082028036833780820191505090505b509050828160008151811061182957611828612621565b5b60200260200101818152505080915050919050565b61185d8473ffffffffffffffffffffffffffffffffffffffff16611a15565b15611a0d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016118a39594939291906131e7565b6020604051808303816000875af19250505080156118df57506040513d601f19601f820116820180604052508101906118dc9190612fd7565b60015b611984576118eb613011565b806308c379a00361194757506118ff613033565b8061190a5750611949565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e9190611cc2565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197b90613135565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a02906131c7565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a7782611a4c565b9050919050565b611a8781611a6c565b8114611a9257600080fd5b50565b600081359050611aa481611a7e565b92915050565b6000819050919050565b611abd81611aaa565b8114611ac857600080fd5b50565b600081359050611ada81611ab4565b92915050565b60008060408385031215611af757611af6611a42565b5b6000611b0585828601611a95565b9250506020611b1685828601611acb565b9150509250929050565b611b2981611aaa565b82525050565b6000602082019050611b446000830184611b20565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b7f81611b4a565b8114611b8a57600080fd5b50565b600081359050611b9c81611b76565b92915050565b600060208284031215611bb857611bb7611a42565b5b6000611bc684828501611b8d565b91505092915050565b60008115159050919050565b611be481611bcf565b82525050565b6000602082019050611bff6000830184611bdb565b92915050565b600060208284031215611c1b57611c1a611a42565b5b6000611c2984828501611acb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c6c578082015181840152602081019050611c51565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c9482611c32565b611c9e8185611c3d565b9350611cae818560208601611c4e565b611cb781611c78565b840191505092915050565b60006020820190508181036000830152611cdc8184611c89565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d2182611c78565b810181811067ffffffffffffffff82111715611d4057611d3f611ce9565b5b80604052505050565b6000611d53611a38565b9050611d5f8282611d18565b919050565b600067ffffffffffffffff821115611d7f57611d7e611ce9565b5b602082029050602081019050919050565b600080fd5b6000611da8611da384611d64565b611d49565b90508083825260208201905060208402830185811115611dcb57611dca611d90565b5b835b81811015611df45780611de08882611acb565b845260208401935050602081019050611dcd565b5050509392505050565b600082601f830112611e1357611e12611ce4565b5b8135611e23848260208601611d95565b91505092915050565b600080fd5b600067ffffffffffffffff821115611e4c57611e4b611ce9565b5b611e5582611c78565b9050602081019050919050565b82818337600083830152505050565b6000611e84611e7f84611e31565b611d49565b905082815260208101848484011115611ea057611e9f611e2c565b5b611eab848285611e62565b509392505050565b600082601f830112611ec857611ec7611ce4565b5b8135611ed8848260208601611e71565b91505092915050565b600080600080600060a08688031215611efd57611efc611a42565b5b6000611f0b88828901611a95565b9550506020611f1c88828901611a95565b945050604086013567ffffffffffffffff811115611f3d57611f3c611a47565b5b611f4988828901611dfe565b935050606086013567ffffffffffffffff811115611f6a57611f69611a47565b5b611f7688828901611dfe565b925050608086013567ffffffffffffffff811115611f9757611f96611a47565b5b611fa388828901611eb3565b9150509295509295909350565b600067ffffffffffffffff821115611fcb57611fca611ce9565b5b602082029050602081019050919050565b6000611fef611fea84611fb0565b611d49565b9050808382526020820190506020840283018581111561201257612011611d90565b5b835b8181101561203b57806120278882611a95565b845260208401935050602081019050612014565b5050509392505050565b600082601f83011261205a57612059611ce4565b5b813561206a848260208601611fdc565b91505092915050565b6000806040838503121561208a57612089611a42565b5b600083013567ffffffffffffffff8111156120a8576120a7611a47565b5b6120b485828601612045565b925050602083013567ffffffffffffffff8111156120d5576120d4611a47565b5b6120e185828601611dfe565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61212081611aaa565b82525050565b60006121328383612117565b60208301905092915050565b6000602082019050919050565b6000612156826120eb565b61216081856120f6565b935061216b83612107565b8060005b8381101561219c5781516121838882612126565b975061218e8361213e565b92505060018101905061216f565b5085935050505092915050565b600060208201905081810360008301526121c3818461214b565b905092915050565b600067ffffffffffffffff8211156121e6576121e5611ce9565b5b6121ef82611c78565b9050602081019050919050565b600061220f61220a846121cb565b611d49565b90508281526020810184848401111561222b5761222a611e2c565b5b612236848285611e62565b509392505050565b600082601f83011261225357612252611ce4565b5b81356122638482602086016121fc565b91505092915050565b6000806040838503121561228357612282611a42565b5b600083013567ffffffffffffffff8111156122a1576122a0611a47565b5b6122ad8582860161223e565b92505060206122be85828601611acb565b9150509250929050565b6122d181611bcf565b81146122dc57600080fd5b50565b6000813590506122ee816122c8565b92915050565b6000806040838503121561230b5761230a611a42565b5b600061231985828601611a95565b925050602061232a858286016122df565b9150509250929050565b6000806040838503121561234b5761234a611a42565b5b600061235985828601611a95565b925050602061236a85828601611a95565b9150509250929050565b600080600080600060a086880312156123905761238f611a42565b5b600061239e88828901611a95565b95505060206123af88828901611a95565b94505060406123c088828901611acb565b93505060606123d188828901611acb565b925050608086013567ffffffffffffffff8111156123f2576123f1611a47565b5b6123fe88828901611eb3565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612467602a83611c3d565b91506124728261240b565b604082019050919050565b600060208201905081810360008301526124968161245a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124e457607f821691505b6020821081036124f7576124f661249d565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000612559602f83611c3d565b9150612564826124fd565b604082019050919050565b600060208201905081810360008301526125888161254c565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006125eb602983611c3d565b91506125f68261258f565b604082019050919050565b6000602082019050818103600083015261261a816125de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061268a82611aaa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126bc576126bb612650565b5b600182019050919050565b6126d081611a6c565b82525050565b60006020820190506126eb60008301846126c7565b92915050565b600081519050612700816122c8565b92915050565b60006020828403121561271c5761271b611a42565b5b600061272a848285016126f1565b91505092915050565b7f4e6f7420612063726561746f722c207265676973746572206669727374000000600082015250565b6000612769601d83611c3d565b915061277482612733565b602082019050919050565b600060208201905081810360008301526127988161275c565b9050919050565b7f596f75207265616368206c696d6974206f66206d696c6573746f6e6500000000600082015250565b60006127d5601c83611c3d565b91506127e08261279f565b602082019050919050565b60006020820190508181036000830152612804816127c8565b9050919050565b600060608201905061282060008301866126c7565b61282d6020830185611b20565b61283a6040830184611b20565b949350505050565b600060408201905061285760008301856126c7565b6128646020830184611b20565b9392505050565b7f596f7520617265206e6f7420656c6c696769626c650000000000000000000000600082015250565b60006128a1601583611c3d565b91506128ac8261286b565b602082019050919050565b600060208201905081810360008301526128d081612894565b9050919050565b6000815190506128e681611ab4565b92915050565b60006020828403121561290257612901611a42565b5b6000612910848285016128d7565b91505092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612975602883611c3d565b915061298082612919565b604082019050919050565b600060208201905081810360008301526129a481612968565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612a07602583611c3d565b9150612a12826129ab565b604082019050919050565b60006020820190508181036000830152612a36816129fa565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612a99602a83611c3d565b9150612aa482612a3d565b604082019050919050565b60006020820190508181036000830152612ac881612a8c565b9050919050565b6000612ada82611aaa565b9150612ae583611aaa565b9250828201905080821115612afd57612afc612650565b5b92915050565b60006040820190508181036000830152612b1d818561214b565b90508181036020830152612b31818461214b565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b96602183611c3d565b9150612ba182612b3a565b604082019050919050565b60006020820190508181036000830152612bc581612b89565b9050919050565b6000604082019050612be16000830185611b20565b612bee6020830184611b20565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c1a565b612c618683612c1a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612c9e612c99612c9484611aaa565b612c79565b611aaa565b9050919050565b6000819050919050565b612cb883612c83565b612ccc612cc482612ca5565b848454612c27565b825550505050565b600090565b612ce1612cd4565b612cec818484612caf565b505050565b5b81811015612d1057612d05600082612cd9565b600181019050612cf2565b5050565b601f821115612d5557612d2681612bf5565b612d2f84612c0a565b81016020851015612d3e578190505b612d52612d4a85612c0a565b830182612cf1565b50505b505050565b600082821c905092915050565b6000612d7860001984600802612d5a565b1980831691505092915050565b6000612d918383612d67565b9150826002028217905092915050565b612daa82611c32565b67ffffffffffffffff811115612dc357612dc2611ce9565b5b612dcd82546124cc565b612dd8828285612d14565b600060209050601f831160018114612e0b5760008415612df9578287015190505b612e038582612d85565b865550612e6b565b601f198416612e1986612bf5565b60005b82811015612e4157848901518255600182019150602085019450602081019050612e1c565b86831015612e5e5784890151612e5a601f891682612d67565b8355505b6001600288020188555050505b505050505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612ecf602983611c3d565b9150612eda82612e73565b604082019050919050565b60006020820190508181036000830152612efe81612ec2565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612f2c82612f05565b612f368185612f10565b9350612f46818560208601611c4e565b612f4f81611c78565b840191505092915050565b600060a082019050612f6f60008301886126c7565b612f7c60208301876126c7565b8181036040830152612f8e818661214b565b90508181036060830152612fa2818561214b565b90508181036080830152612fb68184612f21565b90509695505050505050565b600081519050612fd181611b76565b92915050565b600060208284031215612fed57612fec611a42565b5b6000612ffb84828501612fc2565b91505092915050565b60008160e01c9050919050565b600060033d11156130305760046000803e61302d600051613004565b90505b90565b600060443d106130c057613045611a38565b60043d036004823e80513d602482011167ffffffffffffffff8211171561306d5750506130c0565b808201805167ffffffffffffffff81111561308b57505050506130c0565b80602083010160043d0385018111156130a85750505050506130c0565b6130b782602001850186611d18565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061311f603483611c3d565b915061312a826130c3565b604082019050919050565b6000602082019050818103600083015261314e81613112565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006131b1602883611c3d565b91506131bc82613155565b604082019050919050565b600060208201905081810360008301526131e0816131a4565b9050919050565b600060a0820190506131fc60008301886126c7565b61320960208301876126c7565b6132166040830186611b20565b6132236060830185611b20565b81810360808301526132358184612f21565b9050969550505050505056fea264697066735822122012d6a0a86584b36b49b6293019c24f8b11d933d711ef6081ceed6b103fd669c464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/MilestoneNFT.sol:MilestoneNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 71,
        "contract": "contracts/MilestoneNFT.sol:MilestoneNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 73,
        "contract": "contracts/MilestoneNFT.sol:MilestoneNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2592,
        "contract": "contracts/MilestoneNFT.sol:MilestoneNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)1879_storage"
      },
      {
        "astId": 2596,
        "contract": "contracts/MilestoneNFT.sol:MilestoneNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2598,
        "contract": "contracts/MilestoneNFT.sol:MilestoneNFT",
        "label": "creatorMgmtAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1879_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1878,
            "contract": "contracts/MilestoneNFT.sol:MilestoneNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}