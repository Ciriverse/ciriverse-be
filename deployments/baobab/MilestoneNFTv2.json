{
  "address": "0xd8d78614A02A543f0fc27c1e4F41DF087816F98e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        }
      ],
      "name": "AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "donate",
          "type": "uint256"
        }
      ],
      "name": "AmountToLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        }
      ],
      "name": "NotListed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "donator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Donate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "pic",
          "type": "string"
        }
      ],
      "name": "UserCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MILESTONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pic",
          "type": "string"
        }
      ],
      "name": "creatorRegister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "pic",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "funds",
              "type": "uint256"
            }
          ],
          "internalType": "struct MilestoneNFTv2.Creator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreators",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "pic",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "funds",
              "type": "uint256"
            }
          ],
          "internalType": "struct MilestoneNFTv2.Creator[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getDonatorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getMilestones",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "milestoneId",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "donator",
          "type": "address"
        }
      ],
      "name": "getVotesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "donator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "milestoneId",
          "type": "uint256"
        }
      ],
      "name": "isEligibleToMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "isLessMilestones",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "mintCreatorNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "milestoneId",
          "type": "uint256"
        }
      ],
      "name": "mintDonatorNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pic",
          "type": "string"
        }
      ],
      "name": "updateProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32b7fee773613c4122327c497a8f64336286f79d49d8fd7ae67c48ede7bd7aab",
  "receipt": {
    "to": null,
    "from": "0xcdfB0772A328da9044D5bfD2D51A47230C9873A4",
    "contractAddress": "0xd8d78614A02A543f0fc27c1e4F41DF087816F98e",
    "transactionIndex": 0,
    "gasUsed": "7463202",
    "logsBloom": "0x
    "blockHash": "0x41bbe1a54e7a9c9e14c73dc24177d4f8264ad21188410a9eb672e114c96638a1",
    "transactionHash": "0x32b7fee773613c4122327c497a8f64336286f79d49d8fd7ae67c48ede7bd7aab",
    "logs": [],
    "blockNumber": 103637457,
    "cumulativeGasUsed": "7463202",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 11,
  "solcInputHash": "199793347039e078abad984a86bd19ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"}],\"name\":\"AlreadyListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"donate\",\"type\":\"uint256\"}],\"name\":\"AmountToLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"}],\"name\":\"NotListed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pic\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MILESTONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pic\",\"type\":\"string\"}],\"name\":\"creatorRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pic\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"internalType\":\"struct MilestoneNFTv2.Creator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pic\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"internalType\":\"struct MilestoneNFTv2.Creator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getDonatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getMilestones\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"milestoneId\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"}],\"name\":\"getVotesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"milestoneId\",\"type\":\"uint256\"}],\"name\":\"isEligibleToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"isLessMilestones\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"mintCreatorNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"milestoneId\",\"type\":\"uint256\"}],\"name\":\"mintDonatorNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pic\",\"type\":\"string\"}],\"name\":\"updateProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"creatorRegister(string,string)\":{\"details\":\"register new user, require _name and _pic input require address is not registered\"},\"donate(address)\":{\"details\":\"send donate to creator require creator address is registed as creator require msg.value >= 0.1 ether\"},\"getCreator(address)\":{\"details\":\"Method for get creator profile\"},\"getCreators()\":{\"details\":\"Method to get all creator list\"},\"getDonatorsCount(address)\":{\"details\":\"Method for get creator donators count\"},\"getFunds(address)\":{\"details\":\"Method for get creator funds\"},\"getMilestones(address)\":{\"details\":\"Method to get milestones for spesific creator\"},\"getTokenId(address,uint256)\":{\"details\":\"Method to get tokenId from the spesific creator milestoneId\"},\"getVotesCount(address,address)\":{\"details\":\"Method to return votes count, related to minted MilestoneNFTs\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isCreator(address)\":{\"details\":\"Method to check the address is registered as creator\"},\"isEligibleToMint(address,address,uint256)\":{\"details\":\"Method to check the creator is eligible to mint creator ERC1155 for spesific milestoneId\"},\"isLessMilestones(address)\":{\"details\":\"Method to check if creator not reach maximum milestone\"},\"mintCreatorNFT(string,uint256)\":{\"details\":\"Method for mint NFT as creator require input '_tokenURI' and 'price' require the caller is creator and is not reach maximum minting milestone\"},\"mintDonatorNFT(address,uint256)\":{\"details\":\"Method for mint NFT as donator require input 'creator' and 'milestoneId' require the caller is eligible to mint\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateProfile(string,string)\":{\"details\":\"update profile, require new _name and _pic require address is registered as creator\"},\"uri(uint256)\":{\"details\":\"Method to get ERC1155 uri from tokenId\"},\"withdrawFunds()\":{\"details\":\"Method for withdrawing as creators from donators\"}},\"version\":1},\"userdoc\":{\"events\":{\"UserCreated(address,string,string)\":{\"notice\":\"Events ///\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MilestoneNFTv2.sol\":\"MilestoneNFTv2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MilestoneNFTv2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\\r\\nerror AmountToLow(address sender, address creator, uint256 donate);\\r\\nerror ItemNotForSale(address nftAddress, uint256 tokenId);\\r\\nerror NotListed(address creatorAddress);\\r\\nerror AlreadyListed(address creatorAddress);\\r\\nerror NoFunds();\\r\\nerror NotOwner();\\r\\nerror NotApprovedForMarketplace();\\r\\nerror PriceMustBeAboveZero();\\r\\n\\r\\ncontract MilestoneNFTv2 is ReentrancyGuard, ERC1155 {\\r\\n    using Counters for Counters.Counter;\\r\\n    // ERC1155 data\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    // ERC1155 name\\r\\n    string public name;\\r\\n    // ERC1155 symbol\\r\\n    string public symbol;\\r\\n    // mapping to store tokenURI\\r\\n    mapping(uint256 => string) public tokenURI;\\r\\n    /// All structs ///\\r\\n\\r\\n    // creator struct\\r\\n    struct Creator {\\r\\n        address addr;\\r\\n        string name;\\r\\n        string pic;\\r\\n        uint256 funds;\\r\\n    }\\r\\n\\r\\n    // milestone struct\\r\\n    struct Milestone {\\r\\n        uint256 price;\\r\\n        address nftAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    // MilestonePerDonator struct, to track fund, status of eligible to mint, and minted status\\r\\n    struct MilestonePerDonator {\\r\\n        uint256 fund;\\r\\n        bool[5] status;\\r\\n        bool[5] minted;\\r\\n    }\\r\\n\\r\\n    /// Events ///\\r\\n\\r\\n    // event after user created\\r\\n    event UserCreated(address indexed creator, string name, string pic);\\r\\n\\r\\n    // event after donate happened\\r\\n    event Donate(\\r\\n        address indexed creator,\\r\\n        address indexed donator,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    // Maximum milestone NFT\\r\\n    uint256 public constant MAX_MILESTONE = 5;\\r\\n    // mapping for creators address to its profile\\r\\n    mapping(address => Creator) private s_creators;\\r\\n    // mapping for creators to its milestone array\\r\\n    mapping(address => Milestone[]) private s_milestoneArray;\\r\\n    // mapping for donators to mapping of its supported creators and MilestonePerDonators\\r\\n    mapping(address => mapping(address => MilestonePerDonator)) s_donators;\\r\\n    // mapping for each creators to its donators count\\r\\n    mapping(address => uint256) private s_donatorsCount;\\r\\n    // list of creators\\r\\n    Creator[] private s_creatorsList;\\r\\n\\r\\n    // constructor to set ERC1155 name and symbol\\r\\n    constructor() payable ERC1155(\\\"\\\") {\\r\\n        name = \\\"Ciriverse\\\";\\r\\n        symbol = \\\"CIRI\\\";\\r\\n    }\\r\\n\\r\\n    ///  modifiers ///\\r\\n\\r\\n    // check if not yet registered as a creator\\r\\n    modifier notRegistered(address creatorAddress) {\\r\\n        Creator memory creator = s_creators[creatorAddress];\\r\\n        if (creator.addr != address(0)) {\\r\\n            revert AlreadyListed(creatorAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // check if yet registered as a creator\\r\\n    modifier isRegistered(address creatorAddress) {\\r\\n        Creator memory creator = s_creators[creatorAddress];\\r\\n        if (creator.addr == address(0)) {\\r\\n            revert NotListed(creatorAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // check if the creator is owner of the IERC1155 token\\r\\n    modifier isOwner(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address creator\\r\\n    ) {\\r\\n        IERC1155 nft = IERC1155(nftAddress);\\r\\n        uint256 count = nft.balanceOf(creator, tokenId);\\r\\n        if (count == 0) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// external functions ///\\r\\n\\r\\n    /**\\r\\n     * @dev register new user, require _name and _pic input\\r\\n     * require address is not registered\\r\\n     */\\r\\n    function creatorRegister(string calldata _name, string calldata _pic)\\r\\n        external\\r\\n        notRegistered(msg.sender)\\r\\n    {\\r\\n        s_creators[msg.sender] = Creator(msg.sender, _name, _pic, 0);\\r\\n        s_creatorsList.push(Creator(msg.sender, _name, _pic, 0));\\r\\n        emit UserCreated(msg.sender, _name, _pic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update profile, require new _name and _pic\\r\\n     * require address is registered as creator\\r\\n     */\\r\\n    function updateProfile(string calldata _name, string calldata _pic)\\r\\n        external\\r\\n        isRegistered(msg.sender)\\r\\n    {\\r\\n        s_creators[msg.sender].name = _name;\\r\\n        s_creators[msg.sender].pic = _pic;\\r\\n        emit UserCreated(msg.sender, _name, _pic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev send donate to creator\\r\\n     * require creator address is registed as creator\\r\\n     * require msg.value >= 0.1 ether\\r\\n     */\\r\\n    function donate(address creator)\\r\\n        external\\r\\n        payable\\r\\n        isRegistered(creator)\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (msg.value < 0.1 ether) {\\r\\n            revert AmountToLow(msg.sender, creator, msg.value);\\r\\n        }\\r\\n        s_creators[creator].funds += msg.value;\\r\\n        if (s_donators[msg.sender][creator].fund == 0) {\\r\\n            s_donatorsCount[creator] += 1;\\r\\n        }\\r\\n        s_donators[msg.sender][creator].fund += msg.value;\\r\\n        uint256 milestoneCount = s_milestoneArray[creator].length;\\r\\n\\r\\n        if (milestoneCount > 0) {\\r\\n            for (uint256 i = 0; i < milestoneCount; i++) {\\r\\n                // check if donator reach the milestone?\\r\\n                // check if already marked true?\\r\\n                if (\\r\\n                    (s_donators[msg.sender][creator].fund >=\\r\\n                        s_milestoneArray[creator][i].price) &&\\r\\n                    s_donators[msg.sender][creator].minted[i] == false\\r\\n                ) {\\r\\n                    s_donators[msg.sender][creator].status[i] = true;\\r\\n                    // check if donator already own?\\r\\n                    // if not own and eligible, send the NFTs\\r\\n                    // TODO comeback to this latter when we create NFT contract\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit Donate(creator, msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for withdrawing as creators from donators\\r\\n     */\\r\\n    function withdrawFunds() external {\\r\\n        uint256 funds = s_creators[msg.sender].funds;\\r\\n        if (funds <= 0) {\\r\\n            revert NoFunds();\\r\\n        }\\r\\n        s_creators[msg.sender].funds = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: funds}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for get creator funds\\r\\n     */\\r\\n    function getFunds(address creator) external view returns (uint256) {\\r\\n        return s_creators[creator].funds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for get creator profile\\r\\n     */\\r\\n    function getCreator(address creator)\\r\\n        external\\r\\n        view\\r\\n        returns (Creator memory)\\r\\n    {\\r\\n        return s_creators[address(creator)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for get creator donators count\\r\\n     */\\r\\n    function getDonatorsCount(address creator) external view returns (uint256) {\\r\\n        return s_donatorsCount[creator];\\r\\n    }\\r\\n\\r\\n    /// public functions ///\\r\\n\\r\\n    /**\\r\\n     * @dev Method for mint NFT as creator require input '_tokenURI' and 'price'\\r\\n     * require the caller is creator and is not reach maximum minting milestone\\r\\n     */\\r\\n    function mintCreatorNFT(string memory _tokenURI, uint256 _price)\\r\\n        public\\r\\n        payable\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // check if creator\\r\\n        require(isCreator(msg.sender), \\\"Not a creator, register first\\\");\\r\\n        // check if reach maximum milestone\\r\\n        require(isLessMilestones(msg.sender), \\\"You reach limit of milestone\\\");\\r\\n        _tokenIds.increment();\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        _mint(msg.sender, newItemId, 1, \\\"\\\");\\r\\n        _setTokenURI(newItemId, _tokenURI);\\r\\n        // after mint, please update CreatorMgnt NFTMilestone (call addMilestone)\\r\\n        addMilestone(address(this), newItemId, _price);\\r\\n        return newItemId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for mint NFT as donator require input 'creator' and 'milestoneId'\\r\\n     * require the caller is eligible to mint\\r\\n     */\\r\\n    function mintDonatorNFT(address creator, uint256 milestoneId)\\r\\n        public\\r\\n        payable\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // check if he eligible to mint the milestoneNFT?\\r\\n        require(\\r\\n            isEligibleToMint(creator, msg.sender, milestoneId),\\r\\n            \\\"You are not elligible\\\"\\r\\n        );\\r\\n        // need to check and not mint if already mint one\\r\\n        _mint(msg.sender, getTokenId(creator, milestoneId), 1, \\\"\\\");\\r\\n        // set to not be able to mint again for this milestoneId\\r\\n        afterMintMilestone(creator, milestoneId);\\r\\n        return milestoneId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to check if creator not reach maximum milestone\\r\\n     */\\r\\n    function isLessMilestones(address creator) public view returns (bool) {\\r\\n        return s_milestoneArray[creator].length < MAX_MILESTONE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to check the address is registered as creator\\r\\n     */\\r\\n    function isCreator(address _address) public view returns (bool) {\\r\\n        Creator memory creator = s_creators[_address];\\r\\n        if (creator.addr == address(0)) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to check the creator is eligible to mint creator ERC1155 for spesific milestoneId\\r\\n     */\\r\\n    function isEligibleToMint(\\r\\n        address creatorAddress,\\r\\n        address donator,\\r\\n        uint256 milestoneId\\r\\n    ) public view returns (bool) {\\r\\n        if (\\r\\n            s_donators[donator][creatorAddress].status[milestoneId] == true &&\\r\\n            s_donators[donator][creatorAddress].minted[milestoneId] == false\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to return votes count, related to minted MilestoneNFTs\\r\\n     */\\r\\n    function getVotesCount(address creatorAddress, address donator)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 voteCount = 0;\\r\\n        for (uint256 i = 0; i < 5; i++) {\\r\\n            if (s_donators[donator][creatorAddress].minted[i] == true) {\\r\\n                voteCount++;\\r\\n            }\\r\\n        }\\r\\n        return voteCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get tokenId from the spesific creator milestoneId\\r\\n     */\\r\\n    function getTokenId(address creator, uint256 milestoneId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_milestoneArray[creator][milestoneId].tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get ERC1155 uri from tokenId\\r\\n     */\\r\\n    function uri(uint256 _id) public view override returns (string memory) {\\r\\n        return tokenURI[_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get all creator list\\r\\n     */\\r\\n    function getCreators() public view returns (Creator[] memory) {\\r\\n        return s_creatorsList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get milestones for spesific creator\\r\\n     */\\r\\n    function getMilestones(address creator)\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        uint256 milestoneCount = s_milestoneArray[creator].length;\\r\\n\\r\\n        string[] memory uris = new string[](milestoneCount);\\r\\n\\r\\n        if (milestoneCount > 0) {\\r\\n            for (uint256 i = 0; i < milestoneCount; i++) {\\r\\n                uris[i] = uri(s_milestoneArray[creator][i].tokenId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return uris;\\r\\n    }\\r\\n\\r\\n    /// internal functions ///\\r\\n\\r\\n    /**\\r\\n     * @dev Method to add milestone, require 'nftAddress', 'tokenId' and the 'price'\\r\\n     * require the caller is registered as creator\\r\\n     */\\r\\n    function addMilestone(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    )\\r\\n        internal\\r\\n        isRegistered(msg.sender) // isOwner(nftAddress, tokenId, creator)\\r\\n    {\\r\\n        // add milestone NFTs, check first if the sender registered, is actually own the NFT\\r\\n        // then check if not more than max milestones\\r\\n        require(\\r\\n            s_milestoneArray[msg.sender].length < MAX_MILESTONE,\\r\\n            \\\"You reach limit of milestone\\\"\\r\\n        );\\r\\n        s_milestoneArray[msg.sender].push(\\r\\n            Milestone(price, nftAddress, tokenId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to update donator mint status after they mint milestone NFT\\r\\n     */\\r\\n    function afterMintMilestone(address creator, uint256 milestoneId) internal {\\r\\n        s_donators[msg.sender][creator].minted[milestoneId] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to set ERC1155 token URI\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        tokenURI[tokenId] = _tokenURI;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x178e02d1afcb14d5a20c3e280ea76aa84cda622b5daf968c708a12d2c2a5a02b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b55760003560e01c8063a0210309116100ec578063d5b4959a1161008a578063e6adc1ee11610064578063e6adc1ee1461068b578063e985e9c5146106b6578063efd46065146106f3578063f242432a14610730576101b5565b8063d5b4959a146105e8578063da1bd4b114610611578063decebbce1461064e576101b5565b8063b2bd3ea0116100c6578063b2bd3ea014610515578063ba1f5ef914610545578063c87b56dd14610582578063c9d3cc6a146105bf576101b5565b8063a021030914610472578063a22cb465146104af578063a7287379146104d8576101b5565b806324600fc3116101595780634e1273f4116101335780634e1273f4146103af5780635a8c2e47146103ec57806395d89b411461041c57806396821fc114610447576101b5565b806324600fc31461033257806329f99b9f146103495780632eb2c2d614610386576101b5565b806306fdde031161019557806306fdde0314610250578063095acc581461027b5780630e89341c146102b857806322a4e42d146102f5576101b5565b8062362a95146101ba578062fdd58e146101d657806301ffc9a714610213575b600080fd5b6101d460048036038101906101cf919061402f565b610759565b005b3480156101e257600080fd5b506101fd60048036038101906101f89190614092565b610f43565b60405161020a91906140e1565b60405180910390f35b34801561021f57600080fd5b5061023a60048036038101906102359190614154565b61100c565b604051610247919061419c565b60405180910390f35b34801561025c57600080fd5b506102656110ee565b6040516102729190614247565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d919061402f565b61117c565b6040516102af919061419c565b60405180910390f35b3480156102c457600080fd5b506102df60048036038101906102da9190614269565b6111cb565b6040516102ec9190614247565b60405180910390f35b34801561030157600080fd5b5061031c6004803603810190610317919061402f565b611270565b60405161032991906143a2565b60405180910390f35b34801561033e57600080fd5b506103476113c7565b005b34801561035557600080fd5b50610370600480360381019061036b9190614092565b611540565b60405161037d91906140e1565b60405180910390f35b34801561039257600080fd5b506103ad60048036038101906103a891906145c1565b6115ad565b005b3480156103bb57600080fd5b506103d660048036038101906103d19190614753565b61164e565b6040516103e39190614889565b60405180910390f35b6104066004803603810190610401919061494c565b611767565b60405161041391906140e1565b60405180910390f35b34801561042857600080fd5b5061043161184c565b60405161043e9190614247565b60405180910390f35b34801561045357600080fd5b5061045c6118da565b60405161046991906140e1565b60405180910390f35b34801561047e57600080fd5b506104996004803603810190610494919061402f565b6118df565b6040516104a69190614a21565b60405180910390f35b3480156104bb57600080fd5b506104d660048036038101906104d19190614a6f565b611abc565b005b3480156104e457600080fd5b506104ff60048036038101906104fa9190614aaf565b611ad2565b60405161050c91906140e1565b60405180910390f35b61052f600480360381019061052a9190614092565b611bc4565b60405161053c91906140e1565b60405180910390f35b34801561055157600080fd5b5061056c60048036038101906105679190614aef565b611c48565b604051610579919061419c565b60405180910390f35b34801561058e57600080fd5b506105a960048036038101906105a49190614269565b611dc8565b6040516105b69190614247565b60405180910390f35b3480156105cb57600080fd5b506105e660048036038101906105e19190614b9d565b611e68565b005b3480156105f457600080fd5b5061060f600480360381019061060a9190614b9d565b6121b0565b005b34801561061d57600080fd5b506106386004803603810190610633919061402f565b61273d565b60405161064591906140e1565b60405180910390f35b34801561065a57600080fd5b506106756004803603810190610670919061402f565b612786565b60405161068291906140e1565b60405180910390f35b34801561069757600080fd5b506106a06127d2565b6040516106ad9190614d4a565b60405180910390f35b3480156106c257600080fd5b506106dd60048036038101906106d89190614aaf565b6129b5565b6040516106ea919061419c565b60405180910390f35b3480156106ff57600080fd5b5061071a6004803603810190610715919061402f565b612a49565b604051610727919061419c565b60405180910390f35b34801561073c57600080fd5b5061075760048036038101906107529190614d6c565b612c69565b005b806000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461080c90614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461083890614e32565b80156108855780601f1061085a57610100808354040283529160200191610885565b820191906000526020600020905b81548152906001019060200180831161086857829003601f168201915b5050505050815260200160028201805461089e90614e32565b80601f01602080910402602001604051908101604052809291908181526020018280546108ca90614e32565b80156109175780601f106108ec57610100808354040283529160200191610917565b820191906000526020600020905b8154815290600101906020018083116108fa57829003601f168201915b505050505081526020016003820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036109a157816040517f5d35c4290000000000000000000000000000000000000000000000000000000081526004016109989190614e72565b60405180910390fd5b6002600054036109e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dd90614ed9565b60405180910390fd5b600260008190555067016345785d8a0000341015610a3f573383346040517f9d60dc68000000000000000000000000000000000000000000000000000000008152600401610a3693929190614ef9565b60405180910390fd5b34600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610a919190614f5f565b925050819055506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015403610b77576001600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b6f9190614f5f565b925050819055505b34600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610c069190614f5f565b925050819055506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000811115610ed05760005b81811015610ece57600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110610cb957610cb8614f93565b5b906000526020600020906003020160000154600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410158015610e03575060001515600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018260058110610de957610de8614f93565b5b602091828204019190069054906101000a900460ff161515145b15610ebb576001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018260058110610e9b57610e9a614f93565b5b602091828204019190066101000a81548160ff0219169083151502179055505b8080610ec690614fc2565b915050610c60565b505b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f88dcaca629d63d86330e97adc358b13dd0ebd703239aea96b7ea2fb331b16f4e34604051610f2d91906140e1565b60405180910390a3506001600081905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa9061507c565b60405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110d757507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110e757506110e682612d0a565b5b9050919050565b600580546110fb90614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461112790614e32565b80156111745780601f1061114957610100808354040283529160200191611174565b820191906000526020600020905b81548152906001019060200180831161115757829003601f168201915b505050505081565b60006005600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050109050919050565b60606007600083815260200190815260200160002080546111eb90614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461121790614e32565b80156112645780601f1061123957610100808354040283529160200191611264565b820191906000526020600020905b81548152906001019060200180831161124757829003601f168201915b50505050509050919050565b60606000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008167ffffffffffffffff8111156112d5576112d46143c9565b5b60405190808252806020026020018201604052801561130857816020015b60608152602001906001900390816112f35790505b50905060008211156113bd5760005b828110156113bb5761138a600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061137357611372614f93565b5b9060005260206000209060030201600201546111cb565b82828151811061139d5761139c614f93565b5b602002602001018190525080806113b390614fc2565b915050611317565b505b8092505050919050565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154905060008111611448576040517f43f9e11000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516114b6906150cd565b60006040518083038185875af1925050503d80600081146114f3576040519150601f19603f3d011682016040523d82523d6000602084013e6114f8565b606091505b505090508061153c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115339061512e565b60405180910390fd5b5050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061159357611592614f93565b5b906000526020600020906003020160020154905092915050565b6115b5612d74565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806115fb57506115fa856115f5612d74565b6129b5565b5b61163a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611631906151c0565b60405180910390fd5b6116478585858585612d7c565b5050505050565b60608151835114611694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168b90615252565b60405180910390fd5b6000835167ffffffffffffffff8111156116b1576116b06143c9565b5b6040519080825280602002602001820160405280156116df5781602001602082028036833780820191505090505b50905060005b845181101561175c5761172c85828151811061170457611703614f93565b5b602002602001015185838151811061171f5761171e614f93565b5b6020026020010151610f43565b82828151811061173f5761173e614f93565b5b6020026020010181815250508061175590614fc2565b90506116e5565b508091505092915050565b600061177233612a49565b6117b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a8906152be565b60405180910390fd5b6117ba3361117c565b6117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f09061532a565b60405180910390fd5b61180360046130a0565b600061180f60046130b6565b905061182d33826001604051806020016040528060008152506130c4565b6118378185613275565b61184230828561329a565b8091505092915050565b6006805461185990614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461188590614e32565b80156118d25780601f106118a7576101008083540402835291602001916118d2565b820191906000526020600020905b8154815290600101906020018083116118b557829003601f168201915b505050505081565b600581565b6118e7613f7f565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461199790614e32565b80601f01602080910402602001604051908101604052809291908181526020018280546119c390614e32565b8015611a105780601f106119e557610100808354040283529160200191611a10565b820191906000526020600020905b8154815290600101906020018083116119f357829003601f168201915b50505050508152602001600282018054611a2990614e32565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5590614e32565b8015611aa25780601f10611a7757610100808354040283529160200191611aa2565b820191906000526020600020905b815481529060010190602001808311611a8557829003601f168201915b505050505081526020016003820154815250509050919050565b611ace611ac7612d74565b8383613664565b5050565b6000806000905060005b6005811015611bb95760011515600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018260058110611b7a57611b79614f93565b5b602091828204019190069054906101000a900460ff16151503611ba6578180611ba290614fc2565b9250505b8080611bb190614fc2565b915050611adc565b508091505092915050565b6000611bd1833384611c48565b611c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0790615396565b60405180910390fd5b611c3533611c1e8585611540565b6001604051806020016040528060008152506130c4565b611c3f83836137d0565b81905092915050565b600060011515600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018360058110611cdf57611cde614f93565b5b602091828204019190069054906101000a900460ff161515148015611dae575060001515600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018360058110611d9457611d93614f93565b5b602091828204019190069054906101000a900460ff161515145b15611dbc5760019050611dc1565b600090505b9392505050565b60076020528060005260406000206000915090508054611de790614e32565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1390614e32565b8015611e605780601f10611e3557610100808354040283529160200191611e60565b820191906000526020600020905b815481529060010190602001808311611e4357829003601f168201915b505050505081565b336000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054611f1b90614e32565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4790614e32565b8015611f945780601f10611f6957610100808354040283529160200191611f94565b820191906000526020600020905b815481529060010190602001808311611f7757829003601f168201915b50505050508152602001600282018054611fad90614e32565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd990614e32565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b505050505081526020016003820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036120b057816040517f5d35c4290000000000000000000000000000000000000000000000000000000081526004016120a79190614e72565b60405180910390fd5b8585600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101918261210192919061556d565b508383600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201918261215392919061556d565b503373ffffffffffffffffffffffffffffffffffffffff167fa2e1d286e25c6fce64acccdfd7a54d53cce2f617ddff648ab1dbb3458ccdd95b878787876040516121a0949392919061566a565b60405180910390a2505050505050565b336000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461226390614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461228f90614e32565b80156122dc5780601f106122b1576101008083540402835291602001916122dc565b820191906000526020600020905b8154815290600101906020018083116122bf57829003601f168201915b505050505081526020016002820180546122f590614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461232190614e32565b801561236e5780601f106123435761010080835404028352916020019161236e565b820191906000526020600020905b81548152906001019060200180831161235157829003601f168201915b505050505081526020016003820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146123f857816040517f19cd45950000000000000000000000000000000000000000000000000000000081526004016123ef9190614e72565b60405180910390fd5b60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016000815250600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161255391906156a5565b50604082015181600201908161256991906156a5565b5060608201518160030155905050600c60405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016000815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816126be91906156a5565b5060408201518160020190816126d491906156a5565b506060820151816003015550503373ffffffffffffffffffffffffffffffffffffffff167fa2e1d286e25c6fce64acccdfd7a54d53cce2f617ddff648ab1dbb3458ccdd95b8787878760405161272d949392919061566a565b60405180910390a2505050505050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b6060600c805480602002602001604051908101604052809291908181526020016000905b828210156129ac57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461287f90614e32565b80601f01602080910402602001604051908101604052809291908181526020018280546128ab90614e32565b80156128f85780601f106128cd576101008083540402835291602001916128f8565b820191906000526020600020905b8154815290600101906020018083116128db57829003601f168201915b5050505050815260200160028201805461291190614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461293d90614e32565b801561298a5780601f1061295f5761010080835404028352916020019161298a565b820191906000526020600020905b81548152906001019060200180831161296d57829003601f168201915b50505050508152602001600382015481525050815260200190600101906127f6565b50505050905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054612afc90614e32565b80601f0160208091040260200160405190810160405280929190818152602001828054612b2890614e32565b8015612b755780601f10612b4a57610100808354040283529160200191612b75565b820191906000526020600020905b815481529060010190602001808311612b5857829003601f168201915b50505050508152602001600282018054612b8e90614e32565b80601f0160208091040260200160405190810160405280929190818152602001828054612bba90614e32565b8015612c075780601f10612bdc57610100808354040283529160200191612c07565b820191906000526020600020905b815481529060010190602001808311612bea57829003601f168201915b505050505081526020016003820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1603612c5e576000915050612c64565b60019150505b919050565b612c71612d74565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480612cb75750612cb685612cb1612d74565b6129b5565b5b612cf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ced906151c0565b60405180910390fd5b612d038585858585613886565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114612dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db7906157e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e269061587b565b60405180910390fd5b6000612e39612d74565b9050612e49818787878787613b24565b60005b8451811015612ffd576000858281518110612e6a57612e69614f93565b5b602002602001015190506000858381518110612e8957612e88614f93565b5b6020026020010151905060006001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f229061590d565b60405180910390fd5b8181036001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612fe29190614f5f565b9250508190555050505080612ff690614fc2565b9050612e4c565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161307492919061592d565b60405180910390a461308a818787878787613b2c565b613098818787878787613b34565b505050505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603613133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312a906159d6565b60405180910390fd5b600061313d612d74565b9050600061314a85613d0b565b9050600061315785613d0b565b905061316883600089858589613b24565b846001600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131c89190614f5f565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516132469291906159f6565b60405180910390a461325d83600089858589613b2c565b61326c83600089898989613d85565b50505050505050565b8060076000848152602001908152602001600020908161329591906156a5565b505050565b336000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461334d90614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461337990614e32565b80156133c65780601f1061339b576101008083540402835291602001916133c6565b820191906000526020600020905b8154815290600101906020018083116133a957829003601f168201915b505050505081526020016002820180546133df90614e32565b80601f016020809104026020016040519081016040528092919081815260200182805461340b90614e32565b80156134585780601f1061342d57610100808354040283529160200191613458565b820191906000526020600020905b81548152906001019060200180831161343b57829003601f168201915b505050505081526020016003820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036134e257816040517f5d35c4290000000000000000000000000000000000000000000000000000000081526004016134d99190614e72565b60405180910390fd5b6005600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905010613567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161355e9061532a565b60405180910390fd5b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052808581526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015550505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036136d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136c990615a91565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516137c3919061419c565b60405180910390a3505050565b6001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201826005811061386357613862614f93565b5b602091828204019190066101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036138f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138ec9061587b565b60405180910390fd5b60006138ff612d74565b9050600061390c85613d0b565b9050600061391985613d0b565b9050613929838989858589613b24565b60006001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156139c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139b89061590d565b60405180910390fd5b8581036001600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856001600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613a789190614f5f565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051613af59291906159f6565b60405180910390a4613b0b848a8a86868a613b2c565b613b19848a8a8a8a8a613d85565b505050505050505050565b505050505050565b505050505050565b613b538473ffffffffffffffffffffffffffffffffffffffff16613f5c565b15613d03578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401613b99959493929190615b06565b6020604051808303816000875af1925050508015613bd557506040513d601f19601f82011682018060405250810190613bd29190615b83565b60015b613c7a57613be1615bbd565b806308c379a003613c3d5750613bf5615bdf565b80613c005750613c3f565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c349190614247565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c7190615ce1565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613d01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cf890615d73565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115613d2a57613d296143c9565b5b604051908082528060200260200182016040528015613d585781602001602082028036833780820191505090505b5090508281600081518110613d7057613d6f614f93565b5b60200260200101818152505080915050919050565b613da48473ffffffffffffffffffffffffffffffffffffffff16613f5c565b15613f54578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613dea959493929190615d93565b6020604051808303816000875af1925050508015613e2657506040513d601f19601f82011682018060405250810190613e239190615b83565b60015b613ecb57613e32615bbd565b806308c379a003613e8e5750613e46615bdf565b80613e515750613e90565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e859190614247565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ec290615ce1565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f4990615d73565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ffc82613fd1565b9050919050565b61400c81613ff1565b811461401757600080fd5b50565b60008135905061402981614003565b92915050565b60006020828403121561404557614044613fc7565b5b60006140538482850161401a565b91505092915050565b6000819050919050565b61406f8161405c565b811461407a57600080fd5b50565b60008135905061408c81614066565b92915050565b600080604083850312156140a9576140a8613fc7565b5b60006140b78582860161401a565b92505060206140c88582860161407d565b9150509250929050565b6140db8161405c565b82525050565b60006020820190506140f660008301846140d2565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614131816140fc565b811461413c57600080fd5b50565b60008135905061414e81614128565b92915050565b60006020828403121561416a57614169613fc7565b5b60006141788482850161413f565b91505092915050565b60008115159050919050565b61419681614181565b82525050565b60006020820190506141b1600083018461418d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156141f15780820151818401526020810190506141d6565b60008484015250505050565b6000601f19601f8301169050919050565b6000614219826141b7565b61422381856141c2565b93506142338185602086016141d3565b61423c816141fd565b840191505092915050565b60006020820190508181036000830152614261818461420e565b905092915050565b60006020828403121561427f5761427e613fc7565b5b600061428d8482850161407d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006142de826141b7565b6142e881856142c2565b93506142f88185602086016141d3565b614301816141fd565b840191505092915050565b600061431883836142d3565b905092915050565b6000602082019050919050565b600061433882614296565b61434281856142a1565b935083602082028501614354856142b2565b8060005b858110156143905784840389528151614371858261430c565b945061437c83614320565b925060208a01995050600181019050614358565b50829750879550505050505092915050565b600060208201905081810360008301526143bc818461432d565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614401826141fd565b810181811067ffffffffffffffff821117156144205761441f6143c9565b5b80604052505050565b6000614433613fbd565b905061443f82826143f8565b919050565b600067ffffffffffffffff82111561445f5761445e6143c9565b5b602082029050602081019050919050565b600080fd5b600061448861448384614444565b614429565b905080838252602082019050602084028301858111156144ab576144aa614470565b5b835b818110156144d457806144c0888261407d565b8452602084019350506020810190506144ad565b5050509392505050565b600082601f8301126144f3576144f26143c4565b5b8135614503848260208601614475565b91505092915050565b600080fd5b600067ffffffffffffffff82111561452c5761452b6143c9565b5b614535826141fd565b9050602081019050919050565b82818337600083830152505050565b600061456461455f84614511565b614429565b9050828152602081018484840111156145805761457f61450c565b5b61458b848285614542565b509392505050565b600082601f8301126145a8576145a76143c4565b5b81356145b8848260208601614551565b91505092915050565b600080600080600060a086880312156145dd576145dc613fc7565b5b60006145eb8882890161401a565b95505060206145fc8882890161401a565b945050604086013567ffffffffffffffff81111561461d5761461c613fcc565b5b614629888289016144de565b935050606086013567ffffffffffffffff81111561464a57614649613fcc565b5b614656888289016144de565b925050608086013567ffffffffffffffff81111561467757614676613fcc565b5b61468388828901614593565b9150509295509295909350565b600067ffffffffffffffff8211156146ab576146aa6143c9565b5b602082029050602081019050919050565b60006146cf6146ca84614690565b614429565b905080838252602082019050602084028301858111156146f2576146f1614470565b5b835b8181101561471b5780614707888261401a565b8452602084019350506020810190506146f4565b5050509392505050565b600082601f83011261473a576147396143c4565b5b813561474a8482602086016146bc565b91505092915050565b6000806040838503121561476a57614769613fc7565b5b600083013567ffffffffffffffff81111561478857614787613fcc565b5b61479485828601614725565b925050602083013567ffffffffffffffff8111156147b5576147b4613fcc565b5b6147c1858286016144de565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6148008161405c565b82525050565b600061481283836147f7565b60208301905092915050565b6000602082019050919050565b6000614836826147cb565b61484081856147d6565b935061484b836147e7565b8060005b8381101561487c5781516148638882614806565b975061486e8361481e565b92505060018101905061484f565b5085935050505092915050565b600060208201905081810360008301526148a3818461482b565b905092915050565b600067ffffffffffffffff8211156148c6576148c56143c9565b5b6148cf826141fd565b9050602081019050919050565b60006148ef6148ea846148ab565b614429565b90508281526020810184848401111561490b5761490a61450c565b5b614916848285614542565b509392505050565b600082601f830112614933576149326143c4565b5b81356149438482602086016148dc565b91505092915050565b6000806040838503121561496357614962613fc7565b5b600083013567ffffffffffffffff81111561498157614980613fcc565b5b61498d8582860161491e565b925050602061499e8582860161407d565b9150509250929050565b6149b181613ff1565b82525050565b60006080830160008301516149cf60008601826149a8565b50602083015184820360208601526149e782826142d3565b91505060408301518482036040860152614a0182826142d3565b9150506060830151614a1660608601826147f7565b508091505092915050565b60006020820190508181036000830152614a3b81846149b7565b905092915050565b614a4c81614181565b8114614a5757600080fd5b50565b600081359050614a6981614a43565b92915050565b60008060408385031215614a8657614a85613fc7565b5b6000614a948582860161401a565b9250506020614aa585828601614a5a565b9150509250929050565b60008060408385031215614ac657614ac5613fc7565b5b6000614ad48582860161401a565b9250506020614ae58582860161401a565b9150509250929050565b600080600060608486031215614b0857614b07613fc7565b5b6000614b168682870161401a565b9350506020614b278682870161401a565b9250506040614b388682870161407d565b9150509250925092565b600080fd5b60008083601f840112614b5d57614b5c6143c4565b5b8235905067ffffffffffffffff811115614b7a57614b79614b42565b5b602083019150836001820283011115614b9657614b95614470565b5b9250929050565b60008060008060408587031215614bb757614bb6613fc7565b5b600085013567ffffffffffffffff811115614bd557614bd4613fcc565b5b614be187828801614b47565b9450945050602085013567ffffffffffffffff811115614c0457614c03613fcc565b5b614c1087828801614b47565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000608083016000830151614c6260008601826149a8565b5060208301518482036020860152614c7a82826142d3565b91505060408301518482036040860152614c9482826142d3565b9150506060830151614ca960608601826147f7565b508091505092915050565b6000614cc08383614c4a565b905092915050565b6000602082019050919050565b6000614ce082614c1e565b614cea8185614c29565b935083602082028501614cfc85614c3a565b8060005b85811015614d385784840389528151614d198582614cb4565b9450614d2483614cc8565b925060208a01995050600181019050614d00565b50829750879550505050505092915050565b60006020820190508181036000830152614d648184614cd5565b905092915050565b600080600080600060a08688031215614d8857614d87613fc7565b5b6000614d968882890161401a565b9550506020614da78882890161401a565b9450506040614db88882890161407d565b9350506060614dc98882890161407d565b925050608086013567ffffffffffffffff811115614dea57614de9613fcc565b5b614df688828901614593565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614e4a57607f821691505b602082108103614e5d57614e5c614e03565b5b50919050565b614e6c81613ff1565b82525050565b6000602082019050614e876000830184614e63565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614ec3601f836141c2565b9150614ece82614e8d565b602082019050919050565b60006020820190508181036000830152614ef281614eb6565b9050919050565b6000606082019050614f0e6000830186614e63565b614f1b6020830185614e63565b614f2860408301846140d2565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614f6a8261405c565b9150614f758361405c565b9250828201905080821115614f8d57614f8c614f30565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614fcd8261405c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614fff57614ffe614f30565b5b600182019050919050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000615066602a836141c2565b91506150718261500a565b604082019050919050565b6000602082019050818103600083015261509581615059565b9050919050565b600081905092915050565b50565b60006150b760008361509c565b91506150c2826150a7565b600082019050919050565b60006150d8826150aa565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000615118600f836141c2565b9150615123826150e2565b602082019050919050565b600060208201905081810360008301526151478161510b565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b60006151aa602f836141c2565b91506151b58261514e565b604082019050919050565b600060208201905081810360008301526151d98161519d565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b600061523c6029836141c2565b9150615247826151e0565b604082019050919050565b6000602082019050818103600083015261526b8161522f565b9050919050565b7f4e6f7420612063726561746f722c207265676973746572206669727374000000600082015250565b60006152a8601d836141c2565b91506152b382615272565b602082019050919050565b600060208201905081810360008301526152d78161529b565b9050919050565b7f596f75207265616368206c696d6974206f66206d696c6573746f6e6500000000600082015250565b6000615314601c836141c2565b915061531f826152de565b602082019050919050565b6000602082019050818103600083015261534381615307565b9050919050565b7f596f7520617265206e6f7420656c6c696769626c650000000000000000000000600082015250565b60006153806015836141c2565b915061538b8261534a565b602082019050919050565b600060208201905081810360008301526153af81615373565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026154237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826153e6565b61542d86836153e6565b95508019841693508086168417925050509392505050565b6000819050919050565b600061546a6154656154608461405c565b615445565b61405c565b9050919050565b6000819050919050565b6154848361544f565b61549861549082615471565b8484546153f3565b825550505050565b600090565b6154ad6154a0565b6154b881848461547b565b505050565b5b818110156154dc576154d16000826154a5565b6001810190506154be565b5050565b601f821115615521576154f2816153c1565b6154fb846153d6565b8101602085101561550a578190505b61551e615516856153d6565b8301826154bd565b50505b505050565b600082821c905092915050565b600061554460001984600802615526565b1980831691505092915050565b600061555d8383615533565b9150826002028217905092915050565b61557783836153b6565b67ffffffffffffffff8111156155905761558f6143c9565b5b61559a8254614e32565b6155a58282856154e0565b6000601f8311600181146155d457600084156155c2578287013590505b6155cc8582615551565b865550615634565b601f1984166155e2866153c1565b60005b8281101561560a578489013582556001820191506020850194506020810190506155e5565b868310156156275784890135615623601f891682615533565b8355505b6001600288020188555050505b50505050505050565b600061564983856141c2565b9350615656838584614542565b61565f836141fd565b840190509392505050565b6000604082019050818103600083015261568581868861563d565b9050818103602083015261569a81848661563d565b905095945050505050565b6156ae826141b7565b67ffffffffffffffff8111156156c7576156c66143c9565b5b6156d18254614e32565b6156dc8282856154e0565b600060209050601f83116001811461570f57600084156156fd578287015190505b6157078582615551565b86555061576f565b601f19841661571d866153c1565b60005b8281101561574557848901518255600182019150602085019450602081019050615720565b86831015615762578489015161575e601f891682615533565b8355505b6001600288020188555050505b505050505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006157d36028836141c2565b91506157de82615777565b604082019050919050565b60006020820190508181036000830152615802816157c6565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006158656025836141c2565b915061587082615809565b604082019050919050565b6000602082019050818103600083015261589481615858565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006158f7602a836141c2565b91506159028261589b565b604082019050919050565b60006020820190508181036000830152615926816158ea565b9050919050565b60006040820190508181036000830152615947818561482b565b9050818103602083015261595b818461482b565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006159c06021836141c2565b91506159cb82615964565b604082019050919050565b600060208201905081810360008301526159ef816159b3565b9050919050565b6000604082019050615a0b60008301856140d2565b615a1860208301846140d2565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615a7b6029836141c2565b9150615a8682615a1f565b604082019050919050565b60006020820190508181036000830152615aaa81615a6e565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000615ad882615ab1565b615ae28185615abc565b9350615af28185602086016141d3565b615afb816141fd565b840191505092915050565b600060a082019050615b1b6000830188614e63565b615b286020830187614e63565b8181036040830152615b3a818661482b565b90508181036060830152615b4e818561482b565b90508181036080830152615b628184615acd565b90509695505050505050565b600081519050615b7d81614128565b92915050565b600060208284031215615b9957615b98613fc7565b5b6000615ba784828501615b6e565b91505092915050565b60008160e01c9050919050565b600060033d1115615bdc5760046000803e615bd9600051615bb0565b90505b90565b600060443d10615c6c57615bf1613fbd565b60043d036004823e80513d602482011167ffffffffffffffff82111715615c19575050615c6c565b808201805167ffffffffffffffff811115615c375750505050615c6c565b80602083010160043d038501811115615c54575050505050615c6c565b615c63826020018501866143f8565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615ccb6034836141c2565b9150615cd682615c6f565b604082019050919050565b60006020820190508181036000830152615cfa81615cbe565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615d5d6028836141c2565b9150615d6882615d01565b604082019050919050565b60006020820190508181036000830152615d8c81615d50565b9050919050565b600060a082019050615da86000830188614e63565b615db56020830187614e63565b615dc260408301866140d2565b615dcf60608301856140d2565b8181036080830152615de18184615acd565b9050969550505050505056fea26469706673582212203fd552127e5a28985e26f36b752196ac8a379b2dae19627327adf062f80d6acd64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "creatorRegister(string,string)": {
        "details": "register new user, require _name and _pic input require address is not registered"
      },
      "donate(address)": {
        "details": "send donate to creator require creator address is registed as creator require msg.value >= 0.1 ether"
      },
      "getCreator(address)": {
        "details": "Method for get creator profile"
      },
      "getCreators()": {
        "details": "Method to get all creator list"
      },
      "getDonatorsCount(address)": {
        "details": "Method for get creator donators count"
      },
      "getFunds(address)": {
        "details": "Method for get creator funds"
      },
      "getMilestones(address)": {
        "details": "Method to get milestones for spesific creator"
      },
      "getTokenId(address,uint256)": {
        "details": "Method to get tokenId from the spesific creator milestoneId"
      },
      "getVotesCount(address,address)": {
        "details": "Method to return votes count, related to minted MilestoneNFTs"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isCreator(address)": {
        "details": "Method to check the address is registered as creator"
      },
      "isEligibleToMint(address,address,uint256)": {
        "details": "Method to check the creator is eligible to mint creator ERC1155 for spesific milestoneId"
      },
      "isLessMilestones(address)": {
        "details": "Method to check if creator not reach maximum milestone"
      },
      "mintCreatorNFT(string,uint256)": {
        "details": "Method for mint NFT as creator require input '_tokenURI' and 'price' require the caller is creator and is not reach maximum minting milestone"
      },
      "mintDonatorNFT(address,uint256)": {
        "details": "Method for mint NFT as donator require input 'creator' and 'milestoneId' require the caller is eligible to mint"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateProfile(string,string)": {
        "details": "update profile, require new _name and _pic require address is registered as creator"
      },
      "uri(uint256)": {
        "details": "Method to get ERC1155 uri from tokenId"
      },
      "withdrawFunds()": {
        "details": "Method for withdrawing as creators from donators"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "UserCreated(address,string,string)": {
        "notice": "Events ///"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 178,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 184,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 186,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4152,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)3029_storage"
      },
      {
        "astId": 4154,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4156,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4160,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "tokenURI",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4212,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "s_creators",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Creator)4169_storage)"
      },
      {
        "astId": 4218,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "s_milestoneArray",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_struct(Milestone)4176_storage)dyn_storage)"
      },
      {
        "astId": 4225,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "s_donators",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(MilestonePerDonator)4187_storage))"
      },
      {
        "astId": 4229,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "s_donatorsCount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4233,
        "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
        "label": "s_creatorsList",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Creator)4169_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)5_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[5]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Creator)4169_storage)dyn_storage": {
        "base": "t_struct(Creator)4169_storage",
        "encoding": "dynamic_array",
        "label": "struct MilestoneNFTv2.Creator[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Milestone)4176_storage)dyn_storage": {
        "base": "t_struct(Milestone)4176_storage",
        "encoding": "dynamic_array",
        "label": "struct MilestoneNFTv2.Milestone[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Milestone)4176_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MilestoneNFTv2.Milestone[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Milestone)4176_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(MilestonePerDonator)4187_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct MilestoneNFTv2.MilestonePerDonator))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(MilestonePerDonator)4187_storage)"
      },
      "t_mapping(t_address,t_struct(Creator)4169_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MilestoneNFTv2.Creator)",
        "numberOfBytes": "32",
        "value": "t_struct(Creator)4169_storage"
      },
      "t_mapping(t_address,t_struct(MilestonePerDonator)4187_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MilestoneNFTv2.MilestonePerDonator)",
        "numberOfBytes": "32",
        "value": "t_struct(MilestonePerDonator)4187_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3029_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3028,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Creator)4169_storage": {
        "encoding": "inplace",
        "label": "struct MilestoneNFTv2.Creator",
        "members": [
          {
            "astId": 4162,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4164,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4166,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "pic",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4168,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "funds",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Milestone)4176_storage": {
        "encoding": "inplace",
        "label": "struct MilestoneNFTv2.Milestone",
        "members": [
          {
            "astId": 4171,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4173,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "nftAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4175,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MilestonePerDonator)4187_storage": {
        "encoding": "inplace",
        "label": "struct MilestoneNFTv2.MilestonePerDonator",
        "members": [
          {
            "astId": 4178,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "fund",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4182,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bool)5_storage"
          },
          {
            "astId": 4186,
            "contract": "contracts/MilestoneNFTv2.sol:MilestoneNFTv2",
            "label": "minted",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bool)5_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}