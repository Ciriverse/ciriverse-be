{
  "address": "0x6064BB01e024059f03a47c5bCe02d0a0b84D45E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_milestoneAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        }
      ],
      "name": "IsCanVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_option1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_option2",
          "type": "string"
        }
      ],
      "name": "createProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getNumProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "option1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "option2",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesOpt1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votesOpt2",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "result",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum CiriverseDAO.Vote",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "voteOnProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71d2cf1d4390ddb67039e9b8856cb32f91f7b2b9c67b444b5cc40e44191394fe",
  "receipt": {
    "to": null,
    "from": "0xcdfB0772A328da9044D5bfD2D51A47230C9873A4",
    "contractAddress": "0x6064BB01e024059f03a47c5bCe02d0a0b84D45E2",
    "transactionIndex": 0,
    "gasUsed": "2945033",
    "logsBloom": "0x
    "blockHash": "0xe4374ab5e49856da3855de53ddf49832adb8bd502199722b8dff79f1523392a6",
    "transactionHash": "0x71d2cf1d4390ddb67039e9b8856cb32f91f7b2b9c67b444b5cc40e44191394fe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 103713260,
        "transactionHash": "0x71d2cf1d4390ddb67039e9b8856cb32f91f7b2b9c67b444b5cc40e44191394fe",
        "address": "0x6064BB01e024059f03a47c5bCe02d0a0b84D45E2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cdfb0772a328da9044d5bfd2d51a47230c9873a4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe4374ab5e49856da3855de53ddf49832adb8bd502199722b8dff79f1523392a6"
      }
    ],
    "blockNumber": 103713260,
    "cumulativeGasUsed": "2945033",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd8d78614A02A543f0fc27c1e4F41DF087816F98e"
  ],
  "numDeployments": 2,
  "solcInputHash": "3bfb2ba8a0ee37cc5947f32128e3e705",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_milestoneAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"IsCanVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_option1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_option2\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getNumProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"option1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"option2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesOpt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votesOpt2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum CiriverseDAO.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteOnProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"IsCanVote(address,uint256)\":{\"details\":\"check if donators can vote\"},\"createProposal(string,string)\":{\"details\":\"createProposal allows a MilestoneNFT creator to create a new proposal in the DAO\",\"params\":{\"_option1\":\"- the option1 creator to make if this proposal pass if this proposal passes\",\"_option2\":\"- the option2 creator to make if this proposal pass if this proposal passes\"},\"returns\":{\"_0\":\"Returns the proposal index for the newly created proposal\"}},\"executeProposal(address,uint256)\":{\"details\":\"executeProposal allows any creator MilestoneNFTs holder to execute a proposal after it's deadline has been exceeded\",\"params\":{\"proposalIndex\":\"- the index of the proposal to execute in the proposals array\"}},\"getNumProposals(address)\":{\"details\":\"get numProposals for spesific creator\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"voteOnProposal(address,uint256,uint8)\":{\"details\":\"voteOnProposal allows a creator MilestoneNFT holder to cast their vote on an active proposal\",\"params\":{\"creator\":\"- address of creator\",\"proposalIndex\":\"- the index of the proposal to vote on in the proposals array\",\"vote\":\"- the type of vote they want to cast\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CiriverseDAO.sol\":\"CiriverseDAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CiriverseDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./MilestoneNFTv2.sol\\\";\\r\\n\\r\\ncontract CiriverseDAO is Ownable {\\r\\n    // data\\r\\n    // enum for vote\\r\\n    // Create an enum named Vote containing possible options for a vote\\r\\n    enum Vote {\\r\\n        OPTION_1, // OPTION_1 = 0\\r\\n        OPTION_2 // OPTION_2 = 1\\r\\n    }\\r\\n    // Create a struct named Proposal containing all relevant information\\r\\n    struct Proposal {\\r\\n        // deadline - the UNIX timestamp until which this proposal is active. Proposal can be executed after the deadline has been exceeded.\\r\\n        uint256 deadline;\\r\\n        // option1 - game or option to pick from donators/fans\\r\\n        string option1;\\r\\n        // option2 - game or option to pick from donators/fans\\r\\n        string option2;\\r\\n        // votesOpt1 - number of votes for votesOpt1\\r\\n        uint256 votesOpt1;\\r\\n        // votesOpt2 - number of votes for votesOpt2\\r\\n        uint256 votesOpt2;\\r\\n        // executed - whether or not this proposal has been executed yet. Cannot be executed before the deadline has been exceeded.\\r\\n        bool executed;\\r\\n        // voters - a mapping of address voters\\r\\n        mapping(address => uint256) voters;\\r\\n        // results\\r\\n        string result;\\r\\n    }\\r\\n\\r\\n    // Create a mapping of address to array of Proposal\\r\\n    mapping(address => mapping(uint256 => Proposal)) public s_proposals;\\r\\n    // Mapping address to number of proposals that have been created\\r\\n    mapping(address => uint256) public numProposals;\\r\\n    // milestoneNFT address\\r\\n    address private milestoneAddress;\\r\\n\\r\\n    // constructor set up milestoneAddress address\\r\\n    constructor(address _milestoneAddress) {\\r\\n        milestoneAddress = _milestoneAddress;\\r\\n    }\\r\\n\\r\\n    // Create a modifier which only allows a function to be\\r\\n    // called by someone who owns at least 1 creator milestone NFT\\r\\n    modifier nftHolderOnly(address creator) {\\r\\n        uint256 tokenId = MilestoneNFTv2(milestoneAddress).getTokenId(\\r\\n            creator,\\r\\n            0\\r\\n        );\\r\\n        require(\\r\\n            MilestoneNFTv2(milestoneAddress).balanceOf(msg.sender, tokenId) > 0,\\r\\n            \\\"Not reach any milestone\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Create a modifier which only allows a function to be\\r\\n    // called by someone who is a creator\\r\\n    modifier creatorOnly() {\\r\\n        require(\\r\\n            MilestoneNFTv2(milestoneAddress).isCreator(msg.sender),\\r\\n            \\\"You must register first\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Create a modifier which only allows a function to be\\r\\n    // called by someone creator who at least setup 1 creator milestone\\r\\n    modifier withMilestoneOnly() {\\r\\n        require(\\r\\n            MilestoneNFTv2(milestoneAddress).getMilestones(msg.sender).length >\\r\\n                0,\\r\\n            \\\"Creator have'nt setup Milestone NFTs yet.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Create a modifier which only allows a function to be\\r\\n    // called if the given proposal's deadline has not been exceeded yet\\r\\n    modifier activeProposalOnly(address creator, uint256 proposalIndex) {\\r\\n        require(\\r\\n            s_proposals[creator][proposalIndex].deadline > block.timestamp,\\r\\n            \\\"DEADLINE_EXCEEDED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Create a modifier which only allows a function to be\\r\\n    // called if the given proposals' deadline HAS been exceeded\\r\\n    // and if the proposal has not yet been executed\\r\\n    modifier inactiveProposalOnly(address creator, uint256 proposalIndex) {\\r\\n        require(\\r\\n            s_proposals[creator][proposalIndex].deadline <= block.timestamp,\\r\\n            \\\"DEADLINE_NOT_EXCEEDED\\\"\\r\\n        );\\r\\n        require(\\r\\n            s_proposals[creator][proposalIndex].executed == false,\\r\\n            \\\"PROPOSAL_ALREADY_EXECUTED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /** @dev createProposal allows a MilestoneNFT creator to create a new proposal in the DAO\\r\\n     * @param _option1 - the option1 creator to make if this proposal pass if this proposal passes\\r\\n     * @param _option2 - the option2 creator to make if this proposal pass if this proposal passes\\r\\n     * @return Returns the proposal index for the newly created proposal\\r\\n     */\\r\\n    function createProposal(string calldata _option1, string calldata _option2)\\r\\n        external\\r\\n        creatorOnly\\r\\n        withMilestoneOnly\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // should also check if creator have milestoneNFTs or not, because without it no donators can vote.\\r\\n        Proposal storage proposal = s_proposals[msg.sender][\\r\\n            numProposals[msg.sender]\\r\\n        ];\\r\\n        // set proposal options\\r\\n        proposal.option1 = _option1;\\r\\n        proposal.option2 = _option2;\\r\\n        // Set the proposal's voting deadline to be (current time + 30 minutes)\\r\\n        proposal.deadline = block.timestamp + 30 minutes;\\r\\n        // increment the num proposal for this creator\\r\\n        numProposals[msg.sender]++;\\r\\n\\r\\n        return numProposals[msg.sender] - 1;\\r\\n    }\\r\\n\\r\\n    /// @dev voteOnProposal allows a creator MilestoneNFT holder to cast their vote on an active proposal\\r\\n    /// @param creator - address of creator\\r\\n    /// @param proposalIndex - the index of the proposal to vote on in the proposals array\\r\\n    /// @param vote - the type of vote they want to cast\\r\\n    function voteOnProposal(\\r\\n        address creator,\\r\\n        uint256 proposalIndex,\\r\\n        Vote vote\\r\\n    )\\r\\n        external\\r\\n        nftHolderOnly(creator)\\r\\n        activeProposalOnly(creator, proposalIndex)\\r\\n    {\\r\\n        Proposal storage proposal = s_proposals[creator][proposalIndex];\\r\\n\\r\\n        // uint256 voterNFTBalance = cryptoDevsNFT.balanceOf(msg.sender);\\r\\n        // uint8[2] memory voterNFTBalance = MilestoneNFTv2(milestoneAddress).balanceOfBatch([msg.sender, msg.sender], [0,1]);\\r\\n        uint256 numHoldNFTs = MilestoneNFTv2(milestoneAddress).getVotesCount(\\r\\n            creator,\\r\\n            msg.sender\\r\\n        );\\r\\n        // substract holdNFTs count with vote count\\r\\n        uint256 numVotes = numHoldNFTs - proposal.voters[msg.sender];\\r\\n\\r\\n        require(numVotes > 0, \\\"Already vote or not elligible\\\");\\r\\n\\r\\n        if (vote == Vote.OPTION_1) {\\r\\n            proposal.votesOpt1 += numVotes;\\r\\n            proposal.voters[msg.sender] += numVotes;\\r\\n        } else {\\r\\n            proposal.votesOpt2 += numVotes;\\r\\n            proposal.voters[msg.sender] += numVotes;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev executeProposal allows any creator MilestoneNFTs holder to execute a proposal after it's deadline has been exceeded\\r\\n    /// @param proposalIndex - the index of the proposal to execute in the proposals array\\r\\n    function executeProposal(address creator, uint256 proposalIndex)\\r\\n        external\\r\\n        nftHolderOnly(creator)\\r\\n        inactiveProposalOnly(creator, proposalIndex)\\r\\n    {\\r\\n        Proposal storage proposal = s_proposals[creator][proposalIndex];\\r\\n\\r\\n        // If the proposal has more YAY votes than NAY votes\\r\\n        // purchase the NFT from the FakeNFTMarketplace\\r\\n        if (proposal.votesOpt1 > proposal.votesOpt2) {\\r\\n            proposal.result = proposal.option1;\\r\\n        } else {\\r\\n            proposal.result = proposal.option2;\\r\\n        }\\r\\n        proposal.executed = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get numProposals for spesific creator\\r\\n     */\\r\\n    function getNumProposals(address creator) external view returns (uint256) {\\r\\n        return numProposals[creator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev check if donators can vote\\r\\n     */\\r\\n    function IsCanVote(address creator, uint256 proposalIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        Proposal storage proposal = s_proposals[creator][proposalIndex];\\r\\n\\r\\n        uint256 numHoldNFTs = MilestoneNFTv2(milestoneAddress).getVotesCount(\\r\\n            creator,\\r\\n            msg.sender\\r\\n        );\\r\\n        // substract holdNFTs count with vote count\\r\\n        uint256 numVotes = numHoldNFTs - proposal.voters[msg.sender];\\r\\n        return (numVotes > 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa04bb48f01e2c389c2904b4fea3f93e7a93b6cae88a9008a9bc5c2d52ab600fe\",\"license\":\"MIT\"},\"contracts/MilestoneNFTv2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\\r\\nerror AmountToLow(address sender, address creator, uint256 donate);\\r\\nerror ItemNotForSale(address nftAddress, uint256 tokenId);\\r\\nerror NotListed(address creatorAddress);\\r\\nerror AlreadyListed(address creatorAddress);\\r\\nerror NoFunds();\\r\\nerror NotOwner();\\r\\nerror NotApprovedForMarketplace();\\r\\nerror PriceMustBeAboveZero();\\r\\n\\r\\ncontract MilestoneNFTv2 is ReentrancyGuard, ERC1155 {\\r\\n    using Counters for Counters.Counter;\\r\\n    // ERC1155 data\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    // ERC1155 name\\r\\n    string public name;\\r\\n    // ERC1155 symbol\\r\\n    string public symbol;\\r\\n    // mapping to store tokenURI\\r\\n    mapping(uint256 => string) public tokenURI;\\r\\n    /// All structs ///\\r\\n\\r\\n    // creator struct\\r\\n    struct Creator {\\r\\n        address addr;\\r\\n        string name;\\r\\n        string pic;\\r\\n        uint256 funds;\\r\\n    }\\r\\n\\r\\n    // milestone struct\\r\\n    struct Milestone {\\r\\n        uint256 price;\\r\\n        address nftAddress;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    // MilestonePerDonator struct, to track fund, status of eligible to mint, and minted status\\r\\n    struct MilestonePerDonator {\\r\\n        uint256 fund;\\r\\n        bool[5] status;\\r\\n        bool[5] minted;\\r\\n    }\\r\\n\\r\\n    /// Events ///\\r\\n\\r\\n    // event after user created\\r\\n    event UserCreated(address indexed creator, string name, string pic);\\r\\n\\r\\n    // event after donate happened\\r\\n    event Donate(\\r\\n        address indexed creator,\\r\\n        address indexed donator,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    // Maximum milestone NFT\\r\\n    uint256 public constant MAX_MILESTONE = 5;\\r\\n    // mapping for creators address to its profile\\r\\n    mapping(address => Creator) private s_creators;\\r\\n    // mapping for creators to its milestone array\\r\\n    mapping(address => Milestone[]) private s_milestoneArray;\\r\\n    // mapping for donators to mapping of its supported creators and MilestonePerDonators\\r\\n    mapping(address => mapping(address => MilestonePerDonator)) s_donators;\\r\\n    // mapping for each creators to its donators count\\r\\n    mapping(address => uint256) private s_donatorsCount;\\r\\n    // list of creators\\r\\n    Creator[] private s_creatorsList;\\r\\n\\r\\n    // constructor to set ERC1155 name and symbol\\r\\n    constructor() payable ERC1155(\\\"\\\") {\\r\\n        name = \\\"Ciriverse\\\";\\r\\n        symbol = \\\"CIRI\\\";\\r\\n    }\\r\\n\\r\\n    ///  modifiers ///\\r\\n\\r\\n    // check if not yet registered as a creator\\r\\n    modifier notRegistered(address creatorAddress) {\\r\\n        Creator memory creator = s_creators[creatorAddress];\\r\\n        if (creator.addr != address(0)) {\\r\\n            revert AlreadyListed(creatorAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // check if yet registered as a creator\\r\\n    modifier isRegistered(address creatorAddress) {\\r\\n        Creator memory creator = s_creators[creatorAddress];\\r\\n        if (creator.addr == address(0)) {\\r\\n            revert NotListed(creatorAddress);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // check if the creator is owner of the IERC1155 token\\r\\n    modifier isOwner(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        address creator\\r\\n    ) {\\r\\n        IERC1155 nft = IERC1155(nftAddress);\\r\\n        uint256 count = nft.balanceOf(creator, tokenId);\\r\\n        if (count == 0) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// external functions ///\\r\\n\\r\\n    /**\\r\\n     * @dev register new user, require _name and _pic input\\r\\n     * require address is not registered\\r\\n     */\\r\\n    function creatorRegister(string calldata _name, string calldata _pic)\\r\\n        external\\r\\n        notRegistered(msg.sender)\\r\\n    {\\r\\n        s_creators[msg.sender] = Creator(msg.sender, _name, _pic, 0);\\r\\n        s_creatorsList.push(Creator(msg.sender, _name, _pic, 0));\\r\\n        emit UserCreated(msg.sender, _name, _pic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update profile, require new _name and _pic\\r\\n     * require address is registered as creator\\r\\n     */\\r\\n    function updateProfile(string calldata _name, string calldata _pic)\\r\\n        external\\r\\n        isRegistered(msg.sender)\\r\\n    {\\r\\n        s_creators[msg.sender].name = _name;\\r\\n        s_creators[msg.sender].pic = _pic;\\r\\n        emit UserCreated(msg.sender, _name, _pic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev send donate to creator\\r\\n     * require creator address is registed as creator\\r\\n     * require msg.value >= 0.1 ether\\r\\n     */\\r\\n    function donate(address creator)\\r\\n        external\\r\\n        payable\\r\\n        isRegistered(creator)\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (msg.value < 0.1 ether) {\\r\\n            revert AmountToLow(msg.sender, creator, msg.value);\\r\\n        }\\r\\n        s_creators[creator].funds += msg.value;\\r\\n        if (s_donators[msg.sender][creator].fund == 0) {\\r\\n            s_donatorsCount[creator] += 1;\\r\\n        }\\r\\n        s_donators[msg.sender][creator].fund += msg.value;\\r\\n        uint256 milestoneCount = s_milestoneArray[creator].length;\\r\\n\\r\\n        if (milestoneCount > 0) {\\r\\n            for (uint256 i = 0; i < milestoneCount; i++) {\\r\\n                // check if donator reach the milestone?\\r\\n                // check if already marked true?\\r\\n                if (\\r\\n                    (s_donators[msg.sender][creator].fund >=\\r\\n                        s_milestoneArray[creator][i].price) &&\\r\\n                    s_donators[msg.sender][creator].minted[i] == false\\r\\n                ) {\\r\\n                    s_donators[msg.sender][creator].status[i] = true;\\r\\n                    // check if donator already own?\\r\\n                    // if not own and eligible, send the NFTs\\r\\n                    // TODO comeback to this latter when we create NFT contract\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit Donate(creator, msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for withdrawing as creators from donators\\r\\n     */\\r\\n    function withdrawFunds() external {\\r\\n        uint256 funds = s_creators[msg.sender].funds;\\r\\n        if (funds <= 0) {\\r\\n            revert NoFunds();\\r\\n        }\\r\\n        s_creators[msg.sender].funds = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: funds}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for get creator funds\\r\\n     */\\r\\n    function getFunds(address creator) external view returns (uint256) {\\r\\n        return s_creators[creator].funds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for get creator profile\\r\\n     */\\r\\n    function getCreator(address creator)\\r\\n        external\\r\\n        view\\r\\n        returns (Creator memory)\\r\\n    {\\r\\n        return s_creators[address(creator)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for get creator donators count\\r\\n     */\\r\\n    function getDonatorsCount(address creator) external view returns (uint256) {\\r\\n        return s_donatorsCount[creator];\\r\\n    }\\r\\n\\r\\n    /// public functions ///\\r\\n\\r\\n    /**\\r\\n     * @dev Method for mint NFT as creator require input '_tokenURI' and 'price'\\r\\n     * require the caller is creator and is not reach maximum minting milestone\\r\\n     */\\r\\n    function mintCreatorNFT(string memory _tokenURI, uint256 _price)\\r\\n        public\\r\\n        payable\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // check if creator\\r\\n        require(isCreator(msg.sender), \\\"Not a creator, register first\\\");\\r\\n        // check if reach maximum milestone\\r\\n        require(isLessMilestones(msg.sender), \\\"You reach limit of milestone\\\");\\r\\n        _tokenIds.increment();\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        _mint(msg.sender, newItemId, 1, \\\"\\\");\\r\\n        _setTokenURI(newItemId, _tokenURI);\\r\\n        // after mint, please update CreatorMgnt NFTMilestone (call addMilestone)\\r\\n        addMilestone(address(this), newItemId, _price);\\r\\n        return newItemId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method for mint NFT as donator require input 'creator' and 'milestoneId'\\r\\n     * require the caller is eligible to mint\\r\\n     */\\r\\n    function mintDonatorNFT(address creator, uint256 milestoneId)\\r\\n        public\\r\\n        payable\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // check if he eligible to mint the milestoneNFT?\\r\\n        require(\\r\\n            isEligibleToMint(creator, msg.sender, milestoneId),\\r\\n            \\\"You are not elligible\\\"\\r\\n        );\\r\\n        // need to check and not mint if already mint one\\r\\n        _mint(msg.sender, getTokenId(creator, milestoneId), 1, \\\"\\\");\\r\\n        // set to not be able to mint again for this milestoneId\\r\\n        afterMintMilestone(creator, milestoneId);\\r\\n        return milestoneId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to check if creator not reach maximum milestone\\r\\n     */\\r\\n    function isLessMilestones(address creator) public view returns (bool) {\\r\\n        return s_milestoneArray[creator].length < MAX_MILESTONE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to check the address is registered as creator\\r\\n     */\\r\\n    function isCreator(address _address) public view returns (bool) {\\r\\n        Creator memory creator = s_creators[_address];\\r\\n        if (creator.addr == address(0)) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to check the creator is eligible to mint creator ERC1155 for spesific milestoneId\\r\\n     */\\r\\n    function isEligibleToMint(\\r\\n        address creatorAddress,\\r\\n        address donator,\\r\\n        uint256 milestoneId\\r\\n    ) public view returns (bool) {\\r\\n        if (\\r\\n            s_donators[donator][creatorAddress].status[milestoneId] == true &&\\r\\n            s_donators[donator][creatorAddress].minted[milestoneId] == false\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to return votes count, related to minted MilestoneNFTs\\r\\n     */\\r\\n    function getVotesCount(address creatorAddress, address donator)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 voteCount = 0;\\r\\n        for (uint256 i = 0; i < 5; i++) {\\r\\n            if (s_donators[donator][creatorAddress].minted[i] == true) {\\r\\n                voteCount++;\\r\\n            }\\r\\n        }\\r\\n        return voteCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get tokenId from the spesific creator milestoneId\\r\\n     */\\r\\n    function getTokenId(address creator, uint256 milestoneId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_milestoneArray[creator][milestoneId].tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get ERC1155 uri from tokenId\\r\\n     */\\r\\n    function uri(uint256 _id) public view override returns (string memory) {\\r\\n        return tokenURI[_id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get all creator list\\r\\n     */\\r\\n    function getCreators() public view returns (Creator[] memory) {\\r\\n        return s_creatorsList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to get milestones for spesific creator\\r\\n     */\\r\\n    function getMilestones(address creator)\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory)\\r\\n    {\\r\\n        uint256 milestoneCount = s_milestoneArray[creator].length;\\r\\n\\r\\n        string[] memory uris = new string[](milestoneCount);\\r\\n\\r\\n        if (milestoneCount > 0) {\\r\\n            for (uint256 i = 0; i < milestoneCount; i++) {\\r\\n                uris[i] = uri(s_milestoneArray[creator][i].tokenId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return uris;\\r\\n    }\\r\\n\\r\\n    /// internal functions ///\\r\\n\\r\\n    /**\\r\\n     * @dev Method to add milestone, require 'nftAddress', 'tokenId' and the 'price'\\r\\n     * require the caller is registered as creator\\r\\n     */\\r\\n    function addMilestone(\\r\\n        address nftAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    )\\r\\n        internal\\r\\n        isRegistered(msg.sender) // isOwner(nftAddress, tokenId, creator)\\r\\n    {\\r\\n        // add milestone NFTs, check first if the sender registered, is actually own the NFT\\r\\n        // then check if not more than max milestones\\r\\n        require(\\r\\n            s_milestoneArray[msg.sender].length < MAX_MILESTONE,\\r\\n            \\\"You reach limit of milestone\\\"\\r\\n        );\\r\\n        s_milestoneArray[msg.sender].push(\\r\\n            Milestone(price, nftAddress, tokenId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to update donator mint status after they mint milestone NFT\\r\\n     */\\r\\n    function afterMintMilestone(address creator, uint256 milestoneId) internal {\\r\\n        s_donators[msg.sender][creator].minted[milestoneId] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Method to set ERC1155 token URI\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        tokenURI[tokenId] = _tokenURI;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x178e02d1afcb14d5a20c3e280ea76aa84cda622b5daf968c708a12d2c2a5a02b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101595780639b8e873014610177578063a4c4acdf146101a7578063bfc42645146101dd578063f2fde38b146101f95761009e565b806316ba7019146100a35780633ad95b6d146100d357806365e481e2146100ef578063715018a61461011f578063760a80ee14610129575b600080fd5b6100bd60048036038101906100b891906113f5565b610215565b6040516100ca9190611450565b60405180910390f35b6100ed60048036038101906100e89190611490565b61036c565b005b61010960048036038101906101049190611548565b610834565b60405161011691906115d8565b60405180910390f35b610127610b72565b005b610143600480360381019061013e91906115f3565b610b86565b60405161015091906115d8565b60405180910390f35b610161610bcf565b60405161016e919061162f565b60405180910390f35b610191600480360381019061018c91906115f3565b610bf8565b60405161019e91906115d8565b60405180910390f35b6101c160048036038101906101bc91906113f5565b610c10565b6040516101d497969594939291906116da565b60405180910390f35b6101f760048036038101906101f291906113f5565b610e04565b005b610213600480360381019061020e91906115f3565b611180565b005b600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a728737986336040518363ffffffff1660e01b81526004016102c992919061175e565b602060405180830381865afa1580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a919061179c565b905060008260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261035b91906117f8565b905060008111935050505092915050565b826000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329f99b9f8360006040518363ffffffff1660e01b81526004016103cd929190611871565b602060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e919061179c565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e33846040518363ffffffff1660e01b815260040161046e92919061189a565b602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af919061179c565b116104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e69061190f565b60405180910390fd5b848442600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015411610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d9061197b565b60405180910390fd5b6000600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a72873798a336040518363ffffffff1660e01b815260040161063992919061175e565b602060405180830381865afa158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a919061179c565b905060008260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826106cb91906117f8565b905060008111610710576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610707906119e7565b60405180910390fd5b6000600181111561072457610723611a07565b5b88600181111561073757610736611a07565b5b036107b457808360030160008282546107509190611a36565b92505081905550808360060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107a89190611a36565b92505081905550610828565b808360040160008282546107c89190611a36565b92505081905550808360060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108209190611a36565b925050819055505b50505050505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663efd46065336040518263ffffffff1660e01b8152600401610891919061162f565b602060405180830381865afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d29190611a96565b610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090890611b0f565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166322a4e42d336040518263ffffffff1660e01b815260040161096e919061162f565b600060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109b49190611d31565b51116109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec90611dec565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002090508585826001019182610a9b929190612019565b508383826002019182610aaf929190612019565b5061070842610abe9190611a36565b8160000181905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610b16906120e9565b91905055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b6791906117f8565b915050949350505050565b610b7a611203565b610b846000611281565b565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026020528060005260406000206000915090505481565b600160205281600052604060002060205280600052604060002060009150915050806000015490806001018054610c4690611e46565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7290611e46565b8015610cbf5780601f10610c9457610100808354040283529160200191610cbf565b820191906000526020600020905b815481529060010190602001808311610ca257829003601f168201915b505050505090806002018054610cd490611e46565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0090611e46565b8015610d4d5780601f10610d2257610100808354040283529160200191610d4d565b820191906000526020600020905b815481529060010190602001808311610d3057829003601f168201915b5050505050908060030154908060040154908060050160009054906101000a900460ff1690806007018054610d8190611e46565b80601f0160208091040260200160405190810160405280929190818152602001828054610dad90611e46565b8015610dfa5780601f10610dcf57610100808354040283529160200191610dfa565b820191906000526020600020905b815481529060010190602001808311610ddd57829003601f168201915b5050505050905087565b816000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329f99b9f8360006040518363ffffffff1660e01b8152600401610e65929190611871565b602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea6919061179c565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e33846040518363ffffffff1660e01b8152600401610f0692919061189a565b602060405180830381865afa158015610f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f47919061179c565b11610f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7e9061190f565b60405180910390fd5b838342600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154111561101f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110169061217d565b60405180910390fd5b60001515600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060050160009054906101000a900460ff161515146110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd906121e9565b60405180910390fd5b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000209050806004015481600301541115611144578060010181600701908161113e9190612234565b5061115a565b806002018160070190816111589190612234565b505b60018160050160006101000a81548160ff02191690831515021790555050505050505050565b611188611203565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ee9061238e565b60405180910390fd5b61120081611281565b50565b61120b611345565b73ffffffffffffffffffffffffffffffffffffffff16611229610bcf565b73ffffffffffffffffffffffffffffffffffffffff161461127f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611276906123fa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061138c82611361565b9050919050565b61139c81611381565b81146113a757600080fd5b50565b6000813590506113b981611393565b92915050565b6000819050919050565b6113d2816113bf565b81146113dd57600080fd5b50565b6000813590506113ef816113c9565b92915050565b6000806040838503121561140c5761140b611357565b5b600061141a858286016113aa565b925050602061142b858286016113e0565b9150509250929050565b60008115159050919050565b61144a81611435565b82525050565b60006020820190506114656000830184611441565b92915050565b6002811061147857600080fd5b50565b60008135905061148a8161146b565b92915050565b6000806000606084860312156114a9576114a8611357565b5b60006114b7868287016113aa565b93505060206114c8868287016113e0565b92505060406114d98682870161147b565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f840112611508576115076114e3565b5b8235905067ffffffffffffffff811115611525576115246114e8565b5b602083019150836001820283011115611541576115406114ed565b5b9250929050565b6000806000806040858703121561156257611561611357565b5b600085013567ffffffffffffffff8111156115805761157f61135c565b5b61158c878288016114f2565b9450945050602085013567ffffffffffffffff8111156115af576115ae61135c565b5b6115bb878288016114f2565b925092505092959194509250565b6115d2816113bf565b82525050565b60006020820190506115ed60008301846115c9565b92915050565b60006020828403121561160957611608611357565b5b6000611617848285016113aa565b91505092915050565b61162981611381565b82525050565b60006020820190506116446000830184611620565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611684578082015181840152602081019050611669565b60008484015250505050565b6000601f19601f8301169050919050565b60006116ac8261164a565b6116b68185611655565b93506116c6818560208601611666565b6116cf81611690565b840191505092915050565b600060e0820190506116ef600083018a6115c9565b818103602083015261170181896116a1565b9050818103604083015261171581886116a1565b905061172460608301876115c9565b61173160808301866115c9565b61173e60a0830185611441565b81810360c083015261175081846116a1565b905098975050505050505050565b60006040820190506117736000830185611620565b6117806020830184611620565b9392505050565b600081519050611796816113c9565b92915050565b6000602082840312156117b2576117b1611357565b5b60006117c084828501611787565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611803826113bf565b915061180e836113bf565b9250828203905081811115611826576118256117c9565b5b92915050565b6000819050919050565b6000819050919050565b600061185b6118566118518461182c565b611836565b6113bf565b9050919050565b61186b81611840565b82525050565b60006040820190506118866000830185611620565b6118936020830184611862565b9392505050565b60006040820190506118af6000830185611620565b6118bc60208301846115c9565b9392505050565b7f4e6f7420726561636820616e79206d696c6573746f6e65000000000000000000600082015250565b60006118f9601783611655565b9150611904826118c3565b602082019050919050565b60006020820190508181036000830152611928816118ec565b9050919050565b7f444541444c494e455f4558434545444544000000000000000000000000000000600082015250565b6000611965601183611655565b91506119708261192f565b602082019050919050565b6000602082019050818103600083015261199481611958565b9050919050565b7f416c726561647920766f7465206f72206e6f7420656c6c696769626c65000000600082015250565b60006119d1601d83611655565b91506119dc8261199b565b602082019050919050565b60006020820190508181036000830152611a00816119c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611a41826113bf565b9150611a4c836113bf565b9250828201905080821115611a6457611a636117c9565b5b92915050565b611a7381611435565b8114611a7e57600080fd5b50565b600081519050611a9081611a6a565b92915050565b600060208284031215611aac57611aab611357565b5b6000611aba84828501611a81565b91505092915050565b7f596f75206d757374207265676973746572206669727374000000000000000000600082015250565b6000611af9601783611655565b9150611b0482611ac3565b602082019050919050565b60006020820190508181036000830152611b2881611aec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b6782611690565b810181811067ffffffffffffffff82111715611b8657611b85611b2f565b5b80604052505050565b6000611b9961134d565b9050611ba58282611b5e565b919050565b600067ffffffffffffffff821115611bc557611bc4611b2f565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115611bf657611bf5611b2f565b5b611bff82611690565b9050602081019050919050565b6000611c1f611c1a84611bdb565b611b8f565b905082815260208101848484011115611c3b57611c3a611bd6565b5b611c46848285611666565b509392505050565b600082601f830112611c6357611c626114e3565b5b8151611c73848260208601611c0c565b91505092915050565b6000611c8f611c8a84611baa565b611b8f565b90508083825260208201905060208402830185811115611cb257611cb16114ed565b5b835b81811015611cf957805167ffffffffffffffff811115611cd757611cd66114e3565b5b808601611ce48982611c4e565b85526020850194505050602081019050611cb4565b5050509392505050565b600082601f830112611d1857611d176114e3565b5b8151611d28848260208601611c7c565b91505092915050565b600060208284031215611d4757611d46611357565b5b600082015167ffffffffffffffff811115611d6557611d6461135c565b5b611d7184828501611d03565b91505092915050565b7f43726561746f722068617665276e74207365747570204d696c6573746f6e652060008201527f4e465473207965742e0000000000000000000000000000000000000000000000602082015250565b6000611dd6602983611655565b9150611de182611d7a565b604082019050919050565b60006020820190508181036000830152611e0581611dc9565b9050919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e5e57607f821691505b602082108103611e7157611e70611e17565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611ed97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e9c565b611ee38683611e9c565b95508019841693508086168417925050509392505050565b6000611f16611f11611f0c846113bf565b611836565b6113bf565b9050919050565b6000819050919050565b611f3083611efb565b611f44611f3c82611f1d565b848454611ea9565b825550505050565b600090565b611f59611f4c565b611f64818484611f27565b505050565b5b81811015611f8857611f7d600082611f51565b600181019050611f6a565b5050565b601f821115611fcd57611f9e81611e77565b611fa784611e8c565b81016020851015611fb6578190505b611fca611fc285611e8c565b830182611f69565b50505b505050565b600082821c905092915050565b6000611ff060001984600802611fd2565b1980831691505092915050565b60006120098383611fdf565b9150826002028217905092915050565b6120238383611e0c565b67ffffffffffffffff81111561203c5761203b611b2f565b5b6120468254611e46565b612051828285611f8c565b6000601f831160018114612080576000841561206e578287013590505b6120788582611ffd565b8655506120e0565b601f19841661208e86611e77565b60005b828110156120b657848901358255600182019150602085019450602081019050612091565b868310156120d357848901356120cf601f891682611fdf565b8355505b6001600288020188555050505b50505050505050565b60006120f4826113bf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612126576121256117c9565b5b600182019050919050565b7f444541444c494e455f4e4f545f45584345454445440000000000000000000000600082015250565b6000612167601583611655565b915061217282612131565b602082019050919050565b600060208201905081810360008301526121968161215a565b9050919050565b7f50524f504f53414c5f414c52454144595f455845435554454400000000000000600082015250565b60006121d3601983611655565b91506121de8261219d565b602082019050919050565b60006020820190508181036000830152612202816121c6565b9050919050565b60008154905061221881611e46565b9050919050565b60008190508160005260206000209050919050565b81810361224257505061231a565b61224b82612209565b67ffffffffffffffff81111561226457612263611b2f565b5b61226e8254611e46565b612279828285611f8c565b6000601f8311600181146122a85760008415612296578287015490505b6122a08582611ffd565b865550612313565b601f1984166122b68761221f565b96506122c186611e77565b60005b828110156122e9578489015482556001820191506001850194506020810190506122c4565b868310156123065784890154612302601f891682611fdf565b8355505b6001600288020188555050505b5050505050505b565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612378602683611655565b91506123838261231c565b604082019050919050565b600060208201905081810360008301526123a78161236b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123e4602083611655565b91506123ef826123ae565b602082019050919050565b60006020820190508181036000830152612413816123d7565b905091905056fea2646970667358221220b1ec795c301eef7a16ce7ee370eff185bf317c69e5df5927e2054a6a521b7ea164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "IsCanVote(address,uint256)": {
        "details": "check if donators can vote"
      },
      "createProposal(string,string)": {
        "details": "createProposal allows a MilestoneNFT creator to create a new proposal in the DAO",
        "params": {
          "_option1": "- the option1 creator to make if this proposal pass if this proposal passes",
          "_option2": "- the option2 creator to make if this proposal pass if this proposal passes"
        },
        "returns": {
          "_0": "Returns the proposal index for the newly created proposal"
        }
      },
      "executeProposal(address,uint256)": {
        "details": "executeProposal allows any creator MilestoneNFTs holder to execute a proposal after it's deadline has been exceeded",
        "params": {
          "proposalIndex": "- the index of the proposal to execute in the proposals array"
        }
      },
      "getNumProposals(address)": {
        "details": "get numProposals for spesific creator"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "voteOnProposal(address,uint256,uint8)": {
        "details": "voteOnProposal allows a creator MilestoneNFT holder to cast their vote on an active proposal",
        "params": {
          "creator": "- address of creator",
          "proposalIndex": "- the index of the proposal to vote on in the proposals array",
          "vote": "- the type of vote they want to cast"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3394,
        "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
        "label": "s_proposals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Proposal)3387_storage))"
      },
      {
        "astId": 3398,
        "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
        "label": "numProposals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3400,
        "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
        "label": "milestoneAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Proposal)3387_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct CiriverseDAO.Proposal))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Proposal)3387_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)3387_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CiriverseDAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)3387_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)3387_storage": {
        "encoding": "inplace",
        "label": "struct CiriverseDAO.Proposal",
        "members": [
          {
            "astId": 3370,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3372,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "option1",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3374,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "option2",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3376,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "votesOpt1",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3378,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "votesOpt2",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3380,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "executed",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 3384,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "voters",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3386,
            "contract": "contracts/CiriverseDAO.sol:CiriverseDAO",
            "label": "result",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}